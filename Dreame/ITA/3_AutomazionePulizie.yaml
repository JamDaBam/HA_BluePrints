blueprint:
  name: "Dreame Vacuum - Automazione Pulizie Avanzata"
  description: |
    🤖 **Automazione avanzata per robot Dreame con logiche intelligenti**
    
    ✨ **NOVITÀ v2.0:**
    - 🔄 **Logica adattiva**: La sera si adatta al mattino
    - 🔗 **Pulizie sequenziali**: Più stanze consecutive con attesa
    - 🤖 **Controllo stato robot**: Verifica stato prima di iniziare
    - 📋 **Pianificazione avanzata**: Template Jinja2 personalizzabili
    - 🔔 **Notifiche intelligenti**: Annunci Alexa opzionali
    - 🐛 **Modalità debug**: Log dettagliati per troubleshooting
    
    🎯 **6 slot temporali configurabili**: Mattina + Sera + 4 Blocchi aggiuntivi
  
  domain: automation
  input:
    # ========================================
    # === ENTITÀ PRINCIPALI ===
    # ========================================
    vacuum_entity:
      name: 🤖 Entità Vacuum
      description: |
        Seleziona il tuo robot Dreame.
        Esempio: `vacuum.ambrogio`
      selector:
        entity:
          domain: vacuum
          
    robot_status_sensor:
      name: 📊 Sensore Stato Robot (Opzionale)
      description: |
        Sensore di stato dettagliato del robot per verifiche avanzate prima di iniziare.
        
        🔍 **Come trovarlo:**
        - Generalmente: `sensor.NOME_ROBOT_status` o `sensor.NOME_ROBOT_state`
        - Esempio: se il robot è `vacuum.ambrogio`, cerca `sensor.ambrogio_status`
        
        ⚠️ **Lascia vuoto per disabilitare** il controllo stato (pulizia partirà sempre)
      default: ""
      selector:
        entity:
          domain: sensor
          
    valid_robot_states:
      name: ✅ Stati Robot Validi
      description: |
        Stati in cui il robot può iniziare una pulizia.
        Solo quando il robot è in uno di questi stati la pulizia partirà.
      default: ["idle", "sleeping", "charging", "docked"]
      selector:
        select:
          options:
            - "idle"
            - "sleeping" 
            - "charging"
            - "docked"
            - "paused"
            - "returning"
          multiple: true
          
    # ========================================
    # === CONTROLLO PRESENZA ===
    # ========================================
    presence_entity:
      name: 🏠 Entità Presenza (Opzionale)
      description: |
        Entità che indica se sei in casa o fuori casa.
        
        💡 **Esempi comuni:**
        - `person.il_tuo_nome` (entità Persona)
        - `binary_sensor.occupancy` (sensore presenza PIR)
        - `input_boolean.away_mode` (interruttore manuale) 
        - `counter.people_home` (contatore persone)
        
        ⚠️ **Lascia vuoto per disabilitare** il controllo presenza
      default: ""
      selector:
        entity: {}
        
    presence_value:
      name: 🚪 Valore "Fuori Casa"
      description: |
        Il valore che l'entità presenza deve avere per indicare "fuori casa".
        
        📝 **Esempi comuni:**
        - `person.*` → `"not_home"` o `"away"`
        - `binary_sensor.*` → `"off"` (non rileva presenza)
        - `input_boolean.*` → `"on"` (se acceso = via da casa)
        - `counter.*` → `"0"` (nessuno in casa)
        
        💡 **Come scoprirlo:** Strumenti Sviluppatore → Stati → trova la tua entità quando sei fuori
      default: "not_home"
      
    # ========================================
    # === FLAG PULIZIA GIORNALIERO ===
    # ========================================
    flag_cleaned_today:
      name: 🏃 Flag "Pulito Oggi" 
      description: |
        Input boolean che traccia se è già stata fatta pulizia oggi.
        
        🆕 **Se non ce l'hai, crealo:**
        1. Nel menu a tendina clicca **"+ Crea nuova entità"**
        2. Seleziona **"Input Boolean"**
        3. Nome: "Pulito Oggi", ID: `cleaned_today`
        
        ℹ️ Si accende dopo ogni pulizia, si spegne automaticamente a mezzanotte
      selector:
        entity:
          domain: input_boolean
          
    # ========================================
    # === NOTIFICHE E DEBUG ===
    # ========================================
    notification_targets:
      name: 🔔 Dispositivi Notifica (Opzionale)
      description: |
        Media player Alexa per annunci vocali automatici.
        
        📱 **Sintassi:**
        - Singolo: `media_player.echo_dot_soggiorno`
        - Multipli: `media_player.echo_soggiorno,media_player.alexa_cucina`
        
        🔍 **Come trovarli:** Strumenti Sviluppatore → Stati → cerca `media_player.`
        
        ⚠️ **Lascia vuoto per disabilitare** le notifiche
      default: ""

    debug_mode:
      name: 🐛 Modalità Debug
      description: |
        Abilita log dettagliati per troubleshooting.
        
        📋 **Utile per:**
        - Prima configurazione
        - Verificare funzionamento
        - Risolvere problemi
        
        📝 **Log in:** Impostazioni → Sistema → Log
      default: false
      selector:
        boolean: {}
        
    # ========================================
    # === SLOT MATTINA ===
    # ========================================
    morning_on:
      name: 🌅 MATTINA - Abilita
      description: Attiva la pulizia mattutina programmata
      default: true
      selector:
        boolean: {}
        
    morning_time:
      name: ⏰ MATTINA - Orario
      description: Orario di avvio pulizia mattutina
      default: "08:00:00"
      selector:
        time: {}
        
    morning_weekdays:
      name: 📅 MATTINA - Giorni Settimana
      description: Giorni in cui eseguire la pulizia mattutina
      default: ["monday", "tuesday", "wednesday", "thursday", "friday"]
      selector:
        select:
          options: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
          multiple: true
          
    morning_schedule_template:
      name: 📋 MATTINA - Pianificazione Avanzata (Opzionale)
      description: |
        Template Jinja2 per controlli personalizzati (lascia vuoto per usare solo i giorni).
        
        📝 **Esempi:**
        - `now().isoweekday() == 1` (solo Lunedì)
        - `now().isoweekday() in [1,3,5]` (Lun/Mer/Ven)
        - `now().day % 2 == 0` (giorni pari del mese)
      default: ""
      
    morning_preset:
      name: 🎯 MATTINA - Modalità Pulizia
      description: |
        Modalità di pulizia da utilizzare.
        
        📋 **Opzioni:**
        - **aspira**: Solo aspirazione
        - **lava**: Solo lavaggio
        - **pulisci**: Aspirazione + lavaggio
        - **cleangenius**: Modalità intelligente standard
        - **cleangenius_deep**: Modalità intelligente approfondita
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    morning_rooms:
      name: 🏠 MATTINA - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
        
        📝 **Esempi:**
        - `2,3,4` (stanze con ID 2, 3 e 4)
        - `cucina,soggiorno` (per nome)
        - `` (vuoto = tutta la casa)
      default: ""
      
    # === MATTINA - PULIZIE SEQUENZIALI ===
    morning_sequential:
      name: 🔗 MATTINA - Pulizia Sequenziale
      description: |
        **Pulizia sequenziale** = esegue più pulizie consecutive attendendo il completamento di ogni step.
        
        📋 **Esempio:** Prima aspira il soggiorno, attende che finisca, poi pulisce la cucina.
        
        ⚠️ Se disabilitato, esegue solo lo Step 1
      default: false
      selector:
        boolean: {}
        
    morning_step2_preset:
      name: 🎯 MATTINA - Step 2 - Modalità
      description: Modalità di pulizia per il secondo step (solo se sequenziale abilitato)
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    morning_step2_rooms:
      name: 🏠 MATTINA - Step 2 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
        
        Stanze da pulire nel secondo step sequenziale.
      default: ""
      
    morning_step3_preset:
      name: 🎯 MATTINA - Step 3 - Modalità
      description: Modalità di pulizia per il terzo step (solo se sequenziale abilitato)
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    morning_step3_rooms:
      name: 🏠 MATTINA - Step 3 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
        
        Stanze da pulire nel terzo step sequenziale.
      default: ""
      
    morning_max_wait:
      name: ⏱️ MATTINA - Timeout Attesa (minuti)
      description: |
        Tempo massimo di attesa completamento tra step sequenziali.
        
        ⚠️ Se il robot non finisce entro questo tempo, passa allo step successivo comunque.
      default: 60
      selector:
        number:
          min: 10
          max: 180
          unit_of_measurement: "min"
          
    # ========================================
    # === SLOT SERA ===
    # ========================================
    evening_on:
      name: 🌙 SERA - Abilita
      description: Attiva la pulizia serale programmata
      default: true
      selector:
        boolean: {}
        
    evening_time:
      name: ⏰ SERA - Orario
      description: Orario di avvio pulizia serale
      default: "18:00:00"
      selector:
        time: {}
        
    evening_weekdays:
      name: 📅 SERA - Giorni Settimana
      description: Giorni in cui eseguire la pulizia serale
      default: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
      selector:
        select:
          options: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
          multiple: true
          
    evening_schedule_template:
      name: 📋 SERA - Pianificazione Avanzata (Opzionale)
      description: |
        Template Jinja2 per controlli personalizzati (lascia vuoto per usare solo i giorni).
      default: ""
      
    # === SERA - LOGICA ADATTIVA ===
    evening_conditional:
      name: 🧠 SERA - Logica Adattiva
      description: |
        **Logica adattiva** = come comportarsi in base alla pulizia mattutina.
        
        📋 **Opzioni:**
        - **always**: Esegui sempre (come prima)
        - **skip_if_cleaned**: Salta se già pulito oggi
        - **fallback_if_not_cleaned**: Esegui solo se NON pulito oggi  
        - **adapt_if_cleaned**: Cambia modalità se già pulito oggi
        
        💡 **Utile per evitare doppie pulizie o adattare l'intensità**
      default: "always"
      selector:
        select:
          options:
            - label: "Esegui sempre"
              value: "always"
            - label: "Salta se già pulito oggi"
              value: "skip_if_cleaned"
            - label: "Esegui solo se NON pulito oggi"
              value: "fallback_if_not_cleaned"
            - label: "Adatta modalità se già pulito"
              value: "adapt_if_cleaned"
              
    evening_preset:
      name: 🎯 SERA - Modalità Pulizia
      description: Modalità di pulizia normale per la sera
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    evening_rooms:
      name: 🏠 SERA - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
        
        Stanze da pulire normalmente la sera.
      default: ""
      
    # === SERA - MODALITÀ ALTERNATIVA ===
    evening_fallback_preset:
      name: 🔄 SERA - Modalità Alternativa
      description: |
        Modalità da usare con logica "adapt_if_cleaned".
        
        💡 **Esempio:** Se già pulito, invece di CleanGenius usa solo Aspirazione
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    evening_fallback_rooms:
      name: 🔄 SERA - Stanze Alternative
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
        
        Stanze da pulire con modalità alternativa (es. solo cucina invece di tutta casa).
      default: ""
      
    # === SERA - SEQUENZIALI ===
    evening_sequential:
      name: 🔗 SERA - Pulizia Sequenziale
      description: |
        **Pulizia sequenziale** = esegue più pulizie consecutive attendendo il completamento.
      default: false
      selector:
        boolean: {}
        
    evening_step2_preset:
      name: 🎯 SERA - Step 2 - Modalità
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    evening_step2_rooms:
      name: 🏠 SERA - Step 2 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    evening_step3_preset:
      name: 🎯 SERA - Step 3 - Modalità
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    evening_step3_rooms:
      name: 🏠 SERA - Step 3 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    evening_max_wait:
      name: ⏱️ SERA - Timeout Attesa (minuti)
      default: 60
      selector:
        number:
          min: 10
          max: 180
          unit_of_measurement: "min"
          
    # ========================================
    # === BLOCCO 1 ===
    # ======================================== 
    block1_on:
      name: 🎯 BLOCCO 1 - Abilita
      description: Attiva il primo blocco di pulizia aggiuntivo
      default: false
      selector:
        boolean: {}
        
    block1_time:
      name: ⏰ BLOCCO 1 - Orario
      default: "12:00:00"
      selector:
        time: {}
        
    block1_weekdays:
      name: 📅 BLOCCO 1 - Giorni Settimana
      default: ["saturday", "sunday"]
      selector:
        select:
          options: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
          multiple: true
          
    block1_schedule_template:
      name: 📋 BLOCCO 1 - Pianificazione Avanzata (Opzionale)
      default: ""
      
    block1_conditional:
      name: 🧠 BLOCCO 1 - Logica Adattiva
      description: Come comportarsi in base alle pulizie precedenti
      default: "always"
      selector:
        select:
          options:
            - label: "Esegui sempre"
              value: "always"
            - label: "Salta se già pulito oggi"
              value: "skip_if_cleaned"
            - label: "Esegui solo se NON pulito oggi"
              value: "fallback_if_not_cleaned"
            - label: "Adatta modalità se già pulito"
              value: "adapt_if_cleaned"
              
    block1_preset:
      name: 🎯 BLOCCO 1 - Modalità Pulizia
      default: "pulisci"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    block1_rooms:
      name: 🏠 BLOCCO 1 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    block1_fallback_preset:
      name: 🔄 BLOCCO 1 - Modalità Alternativa
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    block1_fallback_rooms:
      name: 🔄 BLOCCO 1 - Stanze Alternative
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    block1_sequential:
      name: 🔗 BLOCCO 1 - Pulizia Sequenziale
      description: |
        **Pulizia sequenziale** = esegue più pulizie consecutive attendendo il completamento.
      default: false
      selector:
        boolean: {}
        
    block1_step2_preset:
      name: 🎯 BLOCCO 1 - Step 2 - Modalità
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    block1_step2_rooms:
      name: 🏠 BLOCCO 1 - Step 2 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    block1_step3_preset:
      name: 🎯 BLOCCO 1 - Step 3 - Modalità
      default: "aspira"  
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    block1_step3_rooms:
      name: 🏠 BLOCCO 1 - Step 3 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    block1_max_wait:
      name: ⏱️ BLOCCO 1 - Timeout Attesa (minuti)
      default: 60
      selector:
        number:
          min: 10
          max: 180
          unit_of_measurement: "min"

    # ========================================
    # === BLOCCO 2 === 
    # ========================================
    block2_on:
      name: 🎯 BLOCCO 2 - Abilita
      description: Attiva il secondo blocco di pulizia aggiuntivo
      default: false
      selector:
        boolean: {}
        
    block2_time:
      name: ⏰ BLOCCO 2 - Orario
      default: "14:00:00"
      selector:
        time: {}
        
    block2_weekdays:
      name: 📅 BLOCCO 2 - Giorni Settimana
      default: ["saturday", "sunday"]
      selector:
        select:
          options: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
          multiple: true
          
    block2_schedule_template:
      name: 📋 BLOCCO 2 - Pianificazione Avanzata (Opzionale)
      default: ""
      
    block2_conditional:
      name: 🧠 BLOCCO 2 - Logica Adattiva
      default: "always"
      selector:
        select:
          options:
            - label: "Esegui sempre"
              value: "always"
            - label: "Salta se già pulito oggi"
              value: "skip_if_cleaned"
            - label: "Esegui solo se NON pulito oggi"
              value: "fallback_if_not_cleaned"
            - label: "Adatta modalità se già pulito"
              value: "adapt_if_cleaned"
              
    block2_preset:
      name: 🎯 BLOCCO 2 - Modalità Pulizia
      default: "pulisci"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    block2_rooms:
      name: 🏠 BLOCCO 2 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    block2_fallback_preset:
      name: 🔄 BLOCCO 2 - Modalità Alternativa
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    block2_fallback_rooms:
      name: 🔄 BLOCCO 2 - Stanze Alternative
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    block2_sequential:
      name: 🔗 BLOCCO 2 - Pulizia Sequenziale
      default: false
      selector:
        boolean: {}
        
    block2_step2_preset:
      name: 🎯 BLOCCO 2 - Step 2 - Modalità
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    block2_step2_rooms:
      name: 🏠 BLOCCO 2 - Step 2 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    block2_step3_preset:
      name: 🎯 BLOCCO 2 - Step 3 - Modalità
      default: "aspira"  
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    block2_step3_rooms:
      name: 🏠 BLOCCO 2 - Step 3 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    block2_max_wait:
      name: ⏱️ BLOCCO 2 - Timeout Attesa (minuti)
      default: 60
      selector:
        number:
          min: 10
          max: 180
          unit_of_measurement: "min"

    # ========================================
    # === BLOCCO 3 === 
    # ========================================
    block3_on:
      name: 🎯 BLOCCO 3 - Abilita
      description: Attiva il terzo blocco di pulizia aggiuntivo
      default: false
      selector:
        boolean: {}
        
    block3_time:
      name: ⏰ BLOCCO 3 - Orario
      default: "16:00:00"
      selector:
        time: {}
        
    block3_weekdays:
      name: 📅 BLOCCO 3 - Giorni Settimana
      default: ["saturday", "sunday"]
      selector:
        select:
          options: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
          multiple: true
          
    block3_schedule_template:
      name: 📋 BLOCCO 3 - Pianificazione Avanzata (Opzionale)
      default: ""
      
    block3_conditional:
      name: 🧠 BLOCCO 3 - Logica Adattiva
      default: "always"
      selector:
        select:
          options:
            - label: "Esegui sempre"
              value: "always"
            - label: "Salta se già pulito oggi"
              value: "skip_if_cleaned"
            - label: "Esegui solo se NON pulito oggi"
              value: "fallback_if_not_cleaned"
            - label: "Adatta modalità se già pulito"
              value: "adapt_if_cleaned"
              
    block3_preset:
      name: 🎯 BLOCCO 3 - Modalità Pulizia
      default: "pulisci"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    block3_rooms:
      name: 🏠 BLOCCO 3 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    block3_fallback_preset:
      name: 🔄 BLOCCO 3 - Modalità Alternativa
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    block3_fallback_rooms:
      name: 🔄 BLOCCO 3 - Stanze Alternative
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    block3_sequential:
      name: 🔗 BLOCCO 3 - Pulizia Sequenziale
      default: false
      selector:
        boolean: {}
        
    block3_step2_preset:
      name: 🎯 BLOCCO 3 - Step 2 - Modalità
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    block3_step2_rooms:
      name: 🏠 BLOCCO 3 - Step 2 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    block3_step3_preset:
      name: 🎯 BLOCCO 3 - Step 3 - Modalità
      default: "aspira"  
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    block3_step3_rooms:
      name: 🏠 BLOCCO 3 - Step 3 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    block3_max_wait:
      name: ⏱️ BLOCCO 3 - Timeout Attesa (minuti)
      default: 60
      selector:
        number:
          min: 10
          max: 180
          unit_of_measurement: "min"

    # ========================================
    # === BLOCCO 4 === 
    # ========================================
    block4_on:
      name: 🎯 BLOCCO 4 - Abilita
      description: Attiva il quarto blocco di pulizia aggiuntivo
      default: false
      selector:
        boolean: {}
        
    block4_time:
      name: ⏰ BLOCCO 4 - Orario
      default: "20:00:00"
      selector:
        time: {}
        
    block4_weekdays:
      name: 📅 BLOCCO 4 - Giorni Settimana
      default: ["saturday", "sunday"]
      selector:
        select:
          options: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
          multiple: true
          
    block4_schedule_template:
      name: 📋 BLOCCO 4 - Pianificazione Avanzata (Opzionale)
      default: ""
      
    block4_conditional:
      name: 🧠 BLOCCO 4 - Logica Adattiva
      default: "always"
      selector:
        select:
          options:
            - label: "Esegui sempre"
              value: "always"
            - label: "Salta se già pulito oggi"
              value: "skip_if_cleaned"
            - label: "Esegui solo se NON pulito oggi"
              value: "fallback_if_not_cleaned"
            - label: "Adatta modalità se già pulito"
              value: "adapt_if_cleaned"
              
    block4_preset:
      name: 🎯 BLOCCO 4 - Modalità Pulizia
      default: "pulisci"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    block4_rooms:
      name: 🏠 BLOCCO 4 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    block4_fallback_preset:
      name: 🔄 BLOCCO 4 - Modalità Alternativa
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    block4_fallback_rooms:
      name: 🔄 BLOCCO 4 - Stanze Alternative
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    block4_sequential:
      name: 🔗 BLOCCO 4 - Pulizia Sequenziale
      default: false
      selector:
        boolean: {}
        
    block4_step2_preset:
      name: 🎯 BLOCCO 4 - Step 2 - Modalità
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    block4_step2_rooms:
      name: 🏠 BLOCCO 4 - Step 2 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    block4_step3_preset:
      name: 🎯 BLOCCO 4 - Step 3 - Modalità
      default: "aspira"  
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    block4_step3_rooms:
      name: 🏠 BLOCCO 4 - Step 3 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    block4_max_wait:
      name: ⏱️ BLOCCO 4 - Timeout Attesa (minuti)
      default: 60
      selector:
        number:
          min: 10
          max: 180
          unit_of_measurement: "min"

# =========================================
# === TRIGGERS E AZIONI ===
# =========================================
trigger:
  - platform: time
    at: !input morning_time
    id: morning
  - platform: time  
    at: !input evening_time
    id: evening
  - platform: time
    at: !input block1_time
    id: block1
  - platform: time
    at: !input block2_time
    id: block2
  - platform: time
    at: !input block3_time
    id: block3
  - platform: time
    at: !input block4_time
    id: block4
  # Reset flag giornaliero
  - platform: time
    at: "23:59:00"
    id: reset_flag

variables:
  # Entità principali
  vacuum_ent: !input vacuum_entity
  robot_status: !input robot_status_sensor
  valid_states: !input valid_robot_states
  presence_ent: !input presence_entity
  pres_val: !input presence_value
  flag_cleaned: !input flag_cleaned_today
  notification_targets: !input notification_targets
  debug_enabled: !input debug_mode

  # Variabili per slot correnti
  morning_weekdays: !input morning_weekdays
  morning_schedule_template: !input morning_schedule_template
  evening_weekdays: !input evening_weekdays
  evening_schedule_template: !input evening_schedule_template
  evening_conditional: !input evening_conditional
  block1_weekdays: !input block1_weekdays
  block1_schedule_template: !input block1_schedule_template
  block1_conditional: !input block1_conditional
  block2_weekdays: !input block2_weekdays
  block2_schedule_template: !input block2_schedule_template
  block2_conditional: !input block2_conditional
  block3_weekdays: !input block3_weekdays
  block3_schedule_template: !input block3_schedule_template
  block3_conditional: !input block3_conditional
  block4_weekdays: !input block4_weekdays
  block4_schedule_template: !input block4_schedule_template
  block4_conditional: !input block4_conditional

action:
  # === RESET FLAG GIORNALIERO ===
  - if:
      - condition: template
        value_template: "{{ trigger.id == 'reset_flag' }}"
    then:
      - if:
          - condition: template
            value_template: "{{ debug_enabled }}"
        then:
          - service: system_log.write
            data:
              message: "[DREAME BLUEPRINT] 🌙 Reset flag pulizia giornaliero"
              level: info
      - service: input_boolean.turn_off
        target:
          entity_id: "{{ flag_cleaned }}"
      - stop: "Reset flag completato"

  # === LOGICA PRINCIPALE ===
  - choose:
      # ===== MATTINA =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'morning' }}"
          - condition: template
            value_template: "{{ morning_on }}"
          - condition: template
            value_template: |
              {% set current_weekday = now().strftime('%A').lower() %}
              {{ current_weekday in morning_weekdays }}
          - condition: template
            value_template: |
              {% if morning_schedule_template != '' %}
                {{ morning_schedule_template | bool }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: |
              {% if robot_status != '' %}
                {{ states(robot_status) in valid_states }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: |
              {% if presence_ent != '' %}
                {{ states(presence_ent) == pres_val }}
              {% else %}
                true
              {% endif %}
        sequence:
          - if:
              - condition: template
                value_template: "{{ debug_enabled }}"
            then:
              - service: system_log.write
                data:
                  message: "[DREAME BLUEPRINT] 🌅 Avvio pulizia MATTINA"
                  level: info
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ flag_cleaned }}"

      # ===== SERA =====  
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'evening' }}"
          - condition: template
            value_template: "{{ evening_on }}"
          - condition: template
            value_template: |
              {% set current_weekday = now().strftime('%A').lower() %}
              {{ current_weekday in evening_weekdays }}
          - condition: template
            value_template: |
              {% if evening_schedule_template != '' %}
                {{ evening_schedule_template | bool }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: |
              {% if robot_status != '' %}
                {{ states(robot_status) in valid_states }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: |
              {% if presence_ent != '' %}
                {{ states(presence_ent) == pres_val }}
              {% else %}
                true
              {% endif %}
        sequence:
          # === LOGICA ADATTIVA ===
          - choose:
              # Skip se già pulito
              - conditions:
                  - condition: template
                    value_template: "{{ evening_conditional == 'skip_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ debug_enabled }}"
                    then:
                      - service: system_log.write
                        data:
                          message: "[DREAME BLUEPRINT] ⏭️ Pulizia SERA saltata - già pulito oggi"
                          level: info
                  - stop: "Pulizia già effettuata oggi"
              
              # Esegui solo se non pulito
              - conditions:
                  - condition: template
                    value_template: "{{ evening_conditional == 'fallback_if_not_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'off') }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ debug_enabled }}"
                    then:
                      - service: system_log.write
                        data:
                          message: "[DREAME BLUEPRINT] 🌙 Pulizia SERA (Recupero) - non pulito oggi"
                          level: info
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ flag_cleaned }}"
              
              # Adatta modalità se già pulito
              - conditions:
                  - condition: template
                    value_template: "{{ evening_conditional == 'adapt_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ debug_enabled }}"
                    then:
                      - service: system_log.write
                        data:
                          message: "[DREAME BLUEPRINT] 🌙 Pulizia SERA (Modalità Leggera) - già pulito, uso modalità alternativa"
                          level: info
              
              # Esegui sempre (default)
              - conditions: []
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ debug_enabled }}"
                    then:
                      - service: system_log.write
                        data:
                          message: "[DREAME BLUEPRINT] 🌙 Pulizia SERA normale"
                          level: info
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ flag_cleaned }}"

      # ===== BLOCCO 1 =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'block1' }}"
          - condition: template
            value_template: "{{ block1_on }}"
          - condition: template
            value_template: |
              {% set current_weekday = now().strftime('%A').lower() %}
              {{ current_weekday in block1_weekdays }}
          - condition: template
            value_template: |
              {% if block1_schedule_template != '' %}
                {{ block1_schedule_template | bool }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: |
              {% if robot_status != '' %}
                {{ states(robot_status) in valid_states }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: |
              {% if presence_ent != '' %}
                {{ states(presence_ent) == pres_val }}
              {% else %}
                true
              {% endif %}
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ block1_conditional == 'skip_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ debug_enabled }}"
                    then:
                      - service: system_log.write
                        data:
                          message: "[DREAME BLUEPRINT] ⏭️ Pulizia BLOCCO 1 saltata - già pulito oggi"
                          level: info
                  - stop: "Pulizia già effettuata oggi"
              
              - conditions:
                  - condition: template
                    value_template: "{{ block1_conditional == 'fallback_if_not_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'off') }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ debug_enabled }}"
                    then:
                      - service: system_log.write
                        data:
                          message: "[DREAME BLUEPRINT] 🎯 Pulizia BLOCCO 1 (Recupero)"
                          level: info
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ flag_cleaned }}"
              
              - conditions:
                  - condition: template
                    value_template: "{{ block1_conditional == 'adapt_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ debug_enabled }}"
                    then:
                      - service: system_log.write
                        data:
                          message: "[DREAME BLUEPRINT] 🎯 Pulizia BLOCCO 1 (Modalità Leggera)"
                          level: info
              
              - conditions: []
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ debug_enabled }}"
                    then:
                      - service: system_log.write
                        data:
                          message: "[DREAME BLUEPRINT] 🎯 Pulizia BLOCCO 1 normale"
                          level: info
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ flag_cleaned }}"

      # ===== BLOCCO 2 =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'block2' }}"
          - condition: template
            value_template: "{{ block2_on }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ block2_conditional == 'skip_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - stop: "Pulizia già effettuata oggi"
              
              - conditions:
                  - condition: template
                    value_template: "{{ block2_conditional == 'fallback_if_not_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'off') }}"
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ flag_cleaned }}"
              
              - conditions:
                  - condition: template
                    value_template: "{{ block2_conditional == 'adapt_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence: []
              
              - conditions: []
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ flag_cleaned }}"

      # ===== BLOCCO 3 =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'block3' }}"
          - condition: template
            value_template: "{{ block3_on }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ block3_conditional == 'skip_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - stop: "Pulizia già effettuata oggi"
              
              - conditions:
                  - condition: template
                    value_template: "{{ block3_conditional == 'fallback_if_not_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'off') }}"
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ flag_cleaned }}"
              
              - conditions:
                  - condition: template
                    value_template: "{{ block3_conditional == 'adapt_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence: []
              
              - conditions: []
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ flag_cleaned }}"

      # ===== BLOCCO 4 =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'block4' }}"
          - condition: template
            value_template: "{{ block4_on }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ block4_conditional == 'skip_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - stop: "Pulizia già effettuata oggi"
              
              - conditions:
                  - condition: template
                    value_template: "{{ block4_conditional == 'fallback_if_not_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'off') }}"
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ flag_cleaned }}"
              
              - conditions:
                  - condition: template
                    value_template: "{{ block4_conditional == 'adapt_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence: []
              
              - conditions: []
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ flag_cleaned }}"

mode: single
max_exceeded: silent
