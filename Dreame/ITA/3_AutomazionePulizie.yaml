blueprint:
  name: "[DEV] Dreame Vacuum - Automazione Pulizie Avanzata"
  description: |
    🤖 **Automazione avanzata per robot Dreame con logiche intelligenti**
    
    ✨ **NOVITÀ v2.0:**
    - 🔄 **Logica adattiva**: La sera si adatta al mattino
    - 🔗 **Pulizie sequenziali**: Più stanze consecutive con attesa
    - 🤖 **Controllo stato robot**: Verifica stato prima di iniziare
    - 📋 **Pianificazione avanzata**: Template Jinja2 personalizzabili
    - 🔔 **Notifiche intelligenti**: Annunci Alexa opzionali
    - 🐛 **Modalità debug**: Log dettagliati per troubleshooting
    
    📚 **Compatibile con la versione base** - estende le funzionalità esistenti
    
    🎯 **6 slot temporali configurabili**: Mattina + Sera + 4 Schedulazioni aggiuntive
  
  domain: automation
  input:
    # ========================================
    # === ENTITÀ PRINCIPALI ===
    # ========================================
    vacuum_entity:
      name: 🤖 Entità Vacuum
      description: |
        Seleziona il tuo robot Dreame.
        Esempio: `vacuum.ambrogio`
      selector:
        entity:
          domain: vacuum
          
    robot_status_sensor:
      name: 📊 Sensore Stato Robot (Opzionale)
      description: |
        Sensore di stato dettagliato del robot per verifiche avanzate prima di iniziare.
        
        🔍 **Come trovarlo:**
        - Generalmente: `sensor.NOME_ROBOT_status` o `sensor.NOME_ROBOT_state`
        - Esempio: se il robot è `vacuum.ambrogio`, cerca `sensor.ambrogio_status`
        
        ⚠️ **Lascia vuoto per disabilitare** il controllo stato (pulizia partirà sempre)
      default: ""
      selector:
        entity:
          domain: sensor
          
    valid_robot_states:
      name: ✅ Stati Robot Validi
      description: |
        Stati in cui il robot può iniziare una pulizia.
        Solo quando il robot è in uno di questi stati la pulizia partirà.
      default: ["idle", "sleeping", "charging", "docked"]
      selector:
        select:
          options:
            - "idle"
            - "sleeping" 
            - "charging"
            - "docked"
            - "paused"
            - "returning"
          multiple: true
          
    # ========================================
    # === CONTROLLO PRESENZA ===
    # ========================================
    presence_entity:
      name: 🏠 Entità Presenza (Opzionale)
      description: |
        Entità che indica se sei in casa o fuori casa.
        
        💡 **Esempi comuni:**
        - `person.il_tuo_nome` (entità Persona)
        - `binary_sensor.occupancy` (sensore presenza PIR)
        - `input_boolean.away_mode` (interruttore manuale) 
        - `counter.people_home` (contatore persone)
        
        ⚠️ **Lascia vuoto per disabilitare** il controllo presenza
      default: ""
      selector:
        entity: {}
        
    presence_value:
      name: 🚪 Valore "Fuori Casa"
      description: |
        Il valore che l'entità presenza deve avere per indicare "fuori casa".
        
        📝 **Esempi comuni:**
        - `person.*` → `"not_home"` o `"away"`
        - `binary_sensor.*` → `"off"` (non rileva presenza)
        - `input_boolean.*` → `"on"` (se acceso = via da casa)
        - `counter.*` → `"0"` (nessuno in casa)
        
        💡 **Come scoprirlo:** Strumenti Sviluppatore → Stati → trova la tua entità quando sei fuori
      default: "not_home"
      
    # ========================================
    # === FLAG PULIZIA GIORNALIERO ===
    # ========================================
    flag_cleaned_today:
      name: 🏃 Flag "Pulito Oggi" 
      description: |
        Input boolean che traccia se è già stata fatta pulizia oggi.
        
        🆕 **Se non ce l'hai, crealo:**
        1. Nel menu a tendina clicca **"+ Crea nuova entità"**
        2. Seleziona **"Input Boolean"**
        3. Nome: "Pulito Oggi", ID: `cleaned_today`
        
        ℹ️ Si accende dopo ogni pulizia, si spegne automaticamente a mezzanotte
      selector:
        entity:
          domain: input_boolean
          
    # ========================================
    # === NOTIFICHE E DEBUG ===
    # ========================================
    notification_targets:
      name: 🔔 Dispositivi Notifica (Opzionale)
      description: |
        Media player Alexa per annunci vocali automatici.
        
        📱 **Sintassi:**
        - Singolo: `media_player.echo_dot_soggiorno`
        - Multipli: `media_player.echo_soggiorno,media_player.alexa_cucina`
        
        🔍 **Come trovarli:** Strumenti Sviluppatore → Stati → cerca `media_player.`
        
        ⚠️ **Lascia vuoto per disabilitare** le notifiche
      default: ""

    debug_mode:
      name: 🐛 Modalità Debug
      description: |
        Abilita log dettagliati per troubleshooting.
        
        📋 **Utile per:**
        - Prima configurazione
        - Verificare funzionamento
        - Risolvere problemi
        
        📝 **Log in:** Impostazioni → Sistema → Log
      default: false
      selector:
        boolean: {}
        
    # ========================================
    # === SLOT MATTINA ===
    # ========================================
    morning_on:
      name: 🌅 MATTINA - Abilita
      description: Attiva la pulizia mattutina programmata
      default: true
      selector:
        boolean: {}
        
    morning_time:
      name: ⏰ MATTINA - Orario
      description: Orario di avvio pulizia mattutina
      default: "08:00:00"
      selector:
        time: {}
        
    morning_weekdays:
      name: 📅 MATTINA - Giorni Settimana
      description: Giorni in cui eseguire la pulizia mattutina
      default: ["monday", "tuesday", "wednesday", "thursday", "friday"]
      selector:
        select:
          options: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
          multiple: true
          
    morning_schedule_template:
      name: 📋 MATTINA - Pianificazione Avanzata (Opzionale)
      description: |
        Template Jinja2 per controlli personalizzati (lascia vuoto per usare solo i giorni).
        
        📝 **Esempi:**
        - `now().isoweekday() == 1` (solo Lunedì)
        - `now().isoweekday() in [1,3,5]` (Lun/Mer/Ven)
        - `now().day % 2 == 0` (giorni pari del mese)
      default: ""
      
    morning_preset:
      name: 🎯 MATTINA - Modalità Pulizia
      description: |
        Modalità di pulizia da utilizzare.
        
        📋 **Opzioni:**
        - **aspira**: Solo aspirazione
        - **lava**: Solo lavaggio
        - **pulisci**: Aspirazione + lavaggio
        - **cleangenius**: Modalità intelligente standard
        - **cleangenius_deep**: Modalità intelligente approfondita
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    morning_rooms:
      name: 🏠 MATTINA - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
        
        📝 **Esempi:**
        - `2,3,4` (stanze con ID 2, 3 e 4)
        - `cucina,soggiorno` (per nome)
        - `` (vuoto = tutta la casa)
      default: ""
      
    # === MATTINA - PULIZIE SEQUENZIALI ===
    morning_sequential:
      name: 🔗 MATTINA - Pulizia Sequenziale
      description: |
        **Pulizia sequenziale** = esegue più pulizie consecutive attendendo il completamento di ogni step.
        
        📋 **Come funziona:**
        1. Esegue lo Step 1 (modalità e stanze sopra)
        2. **Attende** che il robot finisca completamente
        3. Esegue lo Step 2 (se configurato)
        4. **Attende** di nuovo il completamento
        5. Esegue lo Step 3 (se configurato)
        
        💡 **Esempio pratico:** Prima aspira il soggiorno, poi quando finisce pulisce la cucina
        
        ⚠️ Se disabilitato, esegue solo lo Step 1
      default: false
      selector:
        boolean: {}
        
    morning_step2_preset:
      name: 🎯 MATTINA - Step 2 - Modalità
      description: |
        Modalità di pulizia per il secondo step sequenziale.
        
        **Viene eseguito dopo il completamento dello Step 1** (se pulizia sequenziale abilitata)
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    morning_step2_rooms:
      name: 🏠 MATTINA - Step 2 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
        
        Stanze da pulire nel secondo step sequenziale (dopo il completamento dello Step 1).
      default: ""
      
    morning_step3_preset:
      name: 🎯 MATTINA - Step 3 - Modalità
      description: |
        Modalità di pulizia per il terzo step sequenziale.
        
        **Viene eseguito dopo il completamento dello Step 2** (se configurato)
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    morning_step3_rooms:
      name: 🏠 MATTINA - Step 3 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
        
        Stanze da pulire nel terzo step sequenziale (dopo il completamento dello Step 2).
      default: ""
      
    morning_max_wait:
      name: ⏱️ MATTINA - Timeout Attesa (minuti)
      description: |
        Tempo massimo di attesa completamento tra step sequenziali.
        
        ⚠️ Se il robot non finisce entro questo tempo, passa allo step successivo comunque.
        
        💡 **Consigliato:** 60-90 minuti per pulizie complete, 30-45 per pulizie leggere
      default: 60
      selector:
        number:
          min: 10
          max: 180
          unit_of_measurement: "min"
          
    # ========================================
    # === SLOT SERA ===
    # ========================================
    evening_on:
      name: 🌙 SERA - Abilita
      description: Attiva la pulizia serale programmata
      default: true
      selector:
        boolean: {}
        
    evening_time:
      name: ⏰ SERA - Orario
      description: Orario di avvio pulizia serale
      default: "18:00:00"
      selector:
        time: {}
        
    evening_weekdays:
      name: 📅 SERA - Giorni Settimana
      description: Giorni in cui eseguire la pulizia serale
      default: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
      selector:
        select:
          options: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
          multiple: true
          
    evening_schedule_template:
      name: 📋 SERA - Pianificazione Avanzata (Opzionale)
      description: |
        Template Jinja2 per controlli personalizzati (lascia vuoto per usare solo i giorni).
        
        📝 **Esempi:**
        - `now().isoweekday() == 1` (solo Lunedì)
        - `now().isoweekday() in [1,3,5]` (Lun/Mer/Ven)
        - `now().day % 2 == 0` (giorni pari del mese)
      default: ""
      
    # === SERA - LOGICA ADATTIVA ===
    evening_conditional:
      name: 🧠 SERA - Logica Adattiva
      description: |
        **Logica adattiva** = come comportarsi in base alla pulizia mattutina.
        
        📋 **Opzioni:**
        - **Esegui sempre**: Come prima, ignora se già pulito (default)
        - **Salta se già pulito**: Non fa nulla se flag "pulito oggi" è acceso
        - **Esegui solo se non pulito**: Pulizia di recupero se mattina saltata
        - **Adatta modalità se già pulito**: Usa modalità/stanze alternative se già pulito
        
        💡 **Utile per evitare doppie pulizie o adattare l'intensità in base al mattino**
      default: "always"
      selector:
        select:
          options:
            - label: "Esegui sempre"
              value: "always"
            - label: "Salta se già pulito oggi"
              value: "skip_if_cleaned"
            - label: "Esegui solo se NON pulito oggi"
              value: "fallback_if_not_cleaned"
            - label: "Adatta modalità se già pulito"
              value: "adapt_if_cleaned"
              
    evening_preset:
      name: 🎯 SERA - Modalità Pulizia
      description: |
        Modalità di pulizia normale per la sera.
        
        📋 **Opzioni:**
        - **aspira**: Solo aspirazione
        - **lava**: Solo lavaggio  
        - **pulisci**: Aspirazione + lavaggio
        - **cleangenius**: Modalità intelligente standard
        - **cleangenius_deep**: Modalità intelligente approfondita
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    evening_rooms:
      name: 🏠 SERA - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
        
        Stanze da pulire normalmente la sera.
      default: ""
      
    # === SERA - MODALITÀ ALTERNATIVA ===
    evening_fallback_preset:
      name: 🔄 SERA - Modalità Alternativa
      description: |
        Modalità da usare con logica "Adatta modalità se già pulito".
        
        💡 **Esempio:** Se già pulito al mattino, invece di CleanGenius completo usa solo Aspirazione leggera
        
        📋 **Opzioni:**
        - **aspira**: Solo aspirazione
        - **lava**: Solo lavaggio
        - **pulisci**: Aspirazione + lavaggio
        - **cleangenius**: Modalità intelligente standard
        - **cleangenius_deep**: Modalità intelligente approfondita
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    evening_fallback_rooms:
      name: 🔄 SERA - Stanze Alternative
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
        
        Stanze da pulire con modalità alternativa (es. solo cucina invece di tutta casa).
        
        💡 **Usato quando:** logica è "Adatta modalità se già pulito" e il flag "pulito oggi" è acceso
      default: ""
      
    # === SERA - SEQUENZIALI ===
    evening_sequential:
      name: 🔗 SERA - Pulizia Sequenziale
      description: |
        **Pulizia sequenziale** = esegue più pulizie consecutive attendendo il completamento di ogni step.
        
        📋 **Come funziona:**
        1. Esegue lo Step 1 (modalità e stanze sopra)
        2. **Attende** che il robot finisca completamente
        3. Esegue lo Step 2 (se configurato)
        4. **Attende** di nuovo il completamento
        5. Esegue lo Step 3 (se configurato)
        
        💡 **Esempio pratico:** Prima aspira il soggiorno, poi quando finisce pulisce la cucina
      default: false
      selector:
        boolean: {}
        
    evening_step2_preset:
      name: 🎯 SERA - Step 2 - Modalità
      description: |
        Modalità di pulizia per il secondo step sequenziale.
        
        **Viene eseguito dopo il completamento dello Step 1** (se pulizia sequenziale abilitata)
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    evening_step2_rooms:
      name: 🏠 SERA - Step 2 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
        
        Stanze da pulire nel secondo step sequenziale (dopo il completamento dello Step 1).
      default: ""
      
    evening_step3_preset:
      name: 🎯 SERA - Step 3 - Modalità
      description: |
        Modalità di pulizia per il terzo step sequenziale.
        
        **Viene eseguito dopo il completamento dello Step 2** (se configurato)
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    evening_step3_rooms:
      name: 🏠 SERA - Step 3 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
        
        Stanze da pulire nel terzo step sequenziale (dopo il completamento dello Step 2).
      default: ""
      
    evening_max_wait:
      name: ⏱️ SERA - Timeout Attesa (minuti)
      description: |
        Tempo massimo di attesa completamento tra step sequenziali.
        
        ⚠️ Se il robot non finisce entro questo tempo, passa allo step successivo comunque.
        
        💡 **Consigliato:** 60-90 minuti per pulizie complete, 30-45 per pulizie leggere
      default: 60
      selector:
        number:
          min: 10
          max: 180
          unit_of_measurement: "min"
          
    # ========================================
    # === PRIMA SCHEDULAZIONE AGGIUNTIVA ===
    # ========================================
    schedule1_on:
      name: 🎯 Prima Schedulazione Aggiuntiva - Abilita
      description: |
        Attiva la prima schedulazione aggiuntiva per pulizie personalizzate.
        
        💡 **Utile per:** Pulizie weekend, orari particolari, esigenze specifiche
      default: false
      selector:
        boolean: {}
        
    schedule1_time:
      name: ⏰ Prima Schedulazione Aggiuntiva - Orario
      description: Orario di avvio della prima schedulazione aggiuntiva
      default: "12:00:00"
      selector:
        time: {}
        
    schedule1_weekdays:
      name: 📅 Prima Schedulazione Aggiuntiva - Giorni Settimana
      description: Giorni in cui eseguire la prima schedulazione aggiuntiva
      default: ["saturday", "sunday"]
      selector:
        select:
          options: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
          multiple: true
          
    schedule1_schedule_template:
      name: 📋 Prima Schedulazione Aggiuntiva - Pianificazione Avanzata (Opzionale)
      description: |
        Template Jinja2 per controlli personalizzati (lascia vuoto per usare solo i giorni).
        
        📝 **Esempi:**
        - `now().isoweekday() == 1` (solo Lunedì)
        - `now().isoweekday() in [1,3,5]` (Lun/Mer/Ven)
        - `now().day % 2 == 0` (giorni pari del mese)
      default: ""
      
    schedule1_conditional:
      name: 🧠 Prima Schedulazione Aggiuntiva - Logica Adattiva
      description: |
        **Logica adattiva** = come comportarsi in base alle pulizie precedenti.
        
        📋 **Opzioni:**
        - **Esegui sempre**: Come prima, ignora se già pulito (default)
        - **Salta se già pulito**: Non fa nulla se flag "pulito oggi" è acceso  
        - **Esegui solo se non pulito**: Pulizia di recupero se mattina/sera saltate
        - **Adatta modalità se già pulito**: Usa modalità/stanze alternative se già pulito
      default: "always"
      selector:
        select:
          options:
            - label: "Esegui sempre"
              value: "always"
            - label: "Salta se già pulito oggi"
              value: "skip_if_cleaned"
            - label: "Esegui solo se NON pulito oggi"
              value: "fallback_if_not_cleaned"
            - label: "Adatta modalità se già pulito"
              value: "adapt_if_cleaned"
              
    schedule1_preset:
      name: 🎯 Prima Schedulazione Aggiuntiva - Modalità Pulizia
      description: |
        Modalità di pulizia per la prima schedulazione aggiuntiva.
        
        📋 **Opzioni:**
        - **aspira**: Solo aspirazione
        - **lava**: Solo lavaggio
        - **pulisci**: Aspirazione + lavaggio
        - **cleangenius**: Modalità intelligente standard
        - **cleangenius_deep**: Modalità intelligente approfondita
      default: "pulisci"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule1_rooms:
      name: 🏠 Prima Schedulazione Aggiuntiva - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
        
        📝 **Esempi:**
        - `2,3,4` (stanze con ID 2, 3 e 4)
        - `cucina,soggiorno` (per nome)  
        - `` (vuoto = tutta la casa)
      default: ""
      
    schedule1_fallback_preset:
      name: 🔄 Prima Schedulazione Aggiuntiva - Modalità Alternativa
      description: |
        Modalità da usare con logica "Adatta modalità se già pulito".
        
        💡 **Esempio:** Se già pulito, invece di pulizia completa usa solo aspirazione leggera
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule1_fallback_rooms:
      name: 🔄 Prima Schedulazione Aggiuntiva - Stanze Alternative
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
        
        Stanze alternative quando logica è "Adatta modalità se già pulito".
      default: ""
      
    schedule1_sequential:
      name: 🔗 Prima Schedulazione Aggiuntiva - Pulizia Sequenziale
      description: |
        **Pulizia sequenziale** = esegue più pulizie consecutive attendendo il completamento di ogni step.
        
        📋 **Come funziona:**
        1. Esegue lo Step 1 (modalità e stanze sopra)
        2. **Attende** che il robot finisca completamente
        3. Esegue lo Step 2 (se configurato)
        4. **Attende** di nuovo il completamento  
        5. Esegue lo Step 3 (se configurato)
        
        💡 **Esempio pratico:** Prima aspira il soggiorno, poi quando finisce pulisce la cucina
      default: false
      selector:
        boolean: {}
        
    schedule1_step2_preset:
      name: 🎯 Prima Schedulazione Aggiuntiva - Step 2 - Modalità
      description: |
        Modalità di pulizia per il secondo step sequenziale.
        
        **Viene eseguito dopo il completamento dello Step 1** (se pulizia sequenziale abilitata)
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule1_step2_rooms:
      name: 🏠 Prima Schedulazione Aggiuntiva - Step 2 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
        
        Stanze da pulire nel secondo step sequenziale (dopo il completamento dello Step 1).
      default: ""
      
    schedule1_step3_preset:
      name: 🎯 Prima Schedulazione Aggiuntiva - Step 3 - Modalità
      description: |
        Modalità di pulizia per il terzo step sequenziale.
        
        **Viene eseguito dopo il completamento dello Step 2** (se configurato)
      default: "aspira"  
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule1_step3_rooms:
      name: 🏠 Prima Schedulazione Aggiuntiva - Step 3 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
        
        Stanze da pulire nel terzo step sequenziale (dopo il completamento dello Step 2).
      default: ""
      
    schedule1_max_wait:
      name: ⏱️ Prima Schedulazione Aggiuntiva - Timeout Attesa (minuti)
      description: |
        Tempo massimo di attesa completamento tra step sequenziali.
        
        ⚠️ Se il robot non finisce entro questo tempo, passa allo step successivo comunque.
        
        💡 **Consigliato:** 60-90 minuti per pulizie complete, 30-45 per pulizie leggere
      default: 60
      selector:
        number:
          min: 10
          max: 180
          unit_of_measurement: "min"

    # ========================================
    # === SECONDA SCHEDULAZIONE AGGIUNTIVA ===
    # ========================================
    schedule2_on:
      name: 🎯 Seconda Schedulazione Aggiuntiva - Abilita
      description: |
        Attiva la seconda schedulazione aggiuntiva per pulizie personalizzate.
        
        💡 **Utile per:** Pulizie weekend, orari particolari, esigenze specifiche
      default: false
      selector:
        boolean: {}
        
    schedule2_time:
      name: ⏰ Seconda Schedulazione Aggiuntiva - Orario
      description: Orario di avvio della seconda schedulazione aggiuntiva
      default: "14:00:00"
      selector:
        time: {}
        
    schedule2_weekdays:
      name: 📅 Seconda Schedulazione Aggiuntiva - Giorni Settimana
      description: Giorni in cui eseguire la seconda schedulazione aggiuntiva
      default: ["saturday", "sunday"]
      selector:
        select:
          options: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
          multiple: true
          
    schedule2_schedule_template:
      name: 📋 Seconda Schedulazione Aggiuntiva - Pianificazione Avanzata (Opzionale)
      default: ""
      
    schedule2_conditional:
      name: 🧠 Seconda Schedulazione Aggiuntiva - Logica Adattiva
      description: Come comportarsi in base alle pulizie precedenti
      default: "always"
      selector:
        select:
          options:
            - label: "Esegui sempre"
              value: "always"
            - label: "Salta se già pulito oggi"
              value: "skip_if_cleaned"
            - label: "Esegui solo se NON pulito oggi"
              value: "fallback_if_not_cleaned"
            - label: "Adatta modalità se già pulito"
              value: "adapt_if_cleaned"
              
    schedule2_preset:
      name: 🎯 Seconda Schedulazione Aggiuntiva - Modalità Pulizia
      description: |
        Modalità di pulizia per la seconda schedulazione aggiuntiva.
        
        📋 **Opzioni:**
        - **aspira**: Solo aspirazione
        - **lava**: Solo lavaggio
        - **pulisci**: Aspirazione + lavaggio
        - **cleangenius**: Modalità intelligente standard
        - **cleangenius_deep**: Modalità intelligente approfondita
      default: "pulisci"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule2_rooms:
      name: 🏠 Seconda Schedulazione Aggiuntiva - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    schedule2_fallback_preset:
      name: 🔄 Seconda Schedulazione Aggiuntiva - Modalità Alternativa
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule2_fallback_rooms:
      name: 🔄 Seconda Schedulazione Aggiuntiva - Stanze Alternative
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    schedule2_sequential:
      name: 🔗 Seconda Schedulazione Aggiuntiva - Pulizia Sequenziale
      description: |
        **Pulizia sequenziale** = esegue più pulizie consecutive attendendo il completamento di ogni step.
        
        💡 **Esempio:** Prima aspira il soggiorno, attende che finisca, poi pulisce la cucina
      default: false
      selector:
        boolean: {}
        
    schedule2_step2_preset:
      name: 🎯 Seconda Schedulazione Aggiuntiva - Step 2 - Modalità
      description: |
        Modalità per il secondo step sequenziale (eseguito dopo Step 1)
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule2_step2_rooms:
      name: 🏠 Seconda Schedulazione Aggiuntiva - Step 2 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    schedule2_step3_preset:
      name: 🎯 Seconda Schedulazione Aggiuntiva - Step 3 - Modalità
      description: |
        Modalità per il terzo step sequenziale (eseguito dopo Step 2)
      default: "aspira"  
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule2_step3_rooms:
      name: 🏠 Seconda Schedulazione Aggiuntiva - Step 3 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    schedule2_max_wait:
      name: ⏱️ Seconda Schedulazione Aggiuntiva - Timeout Attesa (minuti)
      description: |
        Tempo massimo di attesa completamento tra step sequenziali.
        
        💡 **Consigliato:** 60-90 minuti per pulizie complete, 30-45 per pulizie leggere
      default: 60
      selector:
        number:
          min: 10
          max: 180
          unit_of_measurement: "min"

    # ========================================
    # === TERZA SCHEDULAZIONE AGGIUNTIVA ===
    # ========================================
    schedule3_on:
      name: 🎯 Terza Schedulazione Aggiuntiva - Abilita
      description: |
        Attiva la terza schedulazione aggiuntiva per pulizie personalizzate.
      default: false
      selector:
        boolean: {}
        
    schedule3_time:
      name: ⏰ Terza Schedulazione Aggiuntiva - Orario
      default: "16:00:00"
      selector:
        time: {}
        
    schedule3_weekdays:
      name: 📅 Terza Schedulazione Aggiuntiva - Giorni Settimana
      default: ["saturday", "sunday"]
      selector:
        select:
          options: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
          multiple: true
          
    schedule3_schedule_template:
      name: 📋 Terza Schedulazione Aggiuntiva - Pianificazione Avanzata (Opzionale)
      default: ""
      
    schedule3_conditional:
      name: 🧠 Terza Schedulazione Aggiuntiva - Logica Adattiva
      default: "always"
      selector:
        select:
          options:
            - label: "Esegui sempre"
              value: "always"
            - label: "Salta se già pulito oggi"
              value: "skip_if_cleaned"
            - label: "Esegui solo se NON pulito oggi"
              value: "fallback_if_not_cleaned"
            - label: "Adatta modalità se già pulito"
              value: "adapt_if_cleaned"
              
    schedule3_preset:
      name: 🎯 Terza Schedulazione Aggiuntiva - Modalità Pulizia
      description: |
        Modalità di pulizia per la terza schedulazione aggiuntiva.
      default: "pulisci"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule3_rooms:
      name: 🏠 Terza Schedulazione Aggiuntiva - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    schedule3_fallback_preset:
      name: 🔄 Terza Schedulazione Aggiuntiva - Modalità Alternativa
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule3_fallback_rooms:
      name: 🔄 Terza Schedulazione Aggiuntiva - Stanze Alternative
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    schedule3_sequential:
      name: 🔗 Terza Schedulazione Aggiuntiva - Pulizia Sequenziale
      description: |
        **Pulizia sequenziale** = esegue più pulizie consecutive attendendo il completamento.
      default: false
      selector:
        boolean: {}
        
    schedule3_step2_preset:
      name: 🎯 Terza Schedulazione Aggiuntiva - Step 2 - Modalità
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule3_step2_rooms:
      name: 🏠 Terza Schedulazione Aggiuntiva - Step 2 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    schedule3_step3_preset:
      name: 🎯 Terza Schedulazione Aggiuntiva - Step 3 - Modalità
      default: "aspira"  
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule3_step3_rooms:
      name: 🏠 Terza Schedulazione Aggiuntiva - Step 3 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    schedule3_max_wait:
      name: ⏱️ Terza Schedulazione Aggiuntiva - Timeout Attesa (minuti)
      default: 60
      selector:
        number:
          min: 10
          max: 180
          unit_of_measurement: "min"

    # ========================================
    # === QUARTA SCHEDULAZIONE AGGIUNTIVA ===
    # ========================================
    schedule4_on:
      name: 🎯 Quarta Schedulazione Aggiuntiva - Abilita
      description: |
        Attiva la quarta schedulazione aggiuntiva per pulizie personalizzate.
      default: false
      selector:
        boolean: {}
        
    schedule4_time:
      name: ⏰ Quarta Schedulazione Aggiuntiva - Orario
      default: "20:00:00"
      selector:
        time: {}
        
    schedule4_weekdays:
      name: 📅 Quarta Schedulazione Aggiuntiva - Giorni Settimana
      default: ["saturday", "sunday"]
      selector:
        select:
          options: ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]
          multiple: true
          
    schedule4_schedule_template:
      name: 📋 Quarta Schedulazione Aggiuntiva - Pianificazione Avanzata (Opzionale)
      default: ""
      
    schedule4_conditional:
      name: 🧠 Quarta Schedulazione Aggiuntiva - Logica Adattiva
      default: "always"
      selector:
        select:
          options:
            - label: "Esegui sempre"
              value: "always"
            - label: "Salta se già pulito oggi"
              value: "skip_if_cleaned"
            - label: "Esegui solo se NON pulito oggi"
              value: "fallback_if_not_cleaned"
            - label: "Adatta modalità se già pulito"
              value: "adapt_if_cleaned"
              
    schedule4_preset:
      name: 🎯 Quarta Schedulazione Aggiuntiva - Modalità Pulizia
      default: "pulisci"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule4_rooms:
      name: 🏠 Quarta Schedulazione Aggiuntiva - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    schedule4_fallback_preset:
      name: 🔄 Quarta Schedulazione Aggiuntiva - Modalità Alternativa
      default: "aspira"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule4_fallback_rooms:
      name: 🔄 Quarta Schedulazione Aggiuntiva - Stanze Alternative
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    schedule4_sequential:
      name: 🔗 Quarta Schedulazione Aggiuntiva - Pulizia Sequenziale
      description: |
        **Pulizia sequenziale** = esegue più pulizie consecutive attendendo il completamento.
      default: false
      selector:
        boolean: {}
        
    schedule4_step2_preset:
      name: 🎯 Quarta Schedulazione Aggiuntiva - Step 2 - Modalità
      default: "cleangenius"
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule4_step2_rooms:
      name: 🏠 Quarta Schedulazione Aggiuntiva - Step 2 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    schedule4_step3_preset:
      name: 🎯 Quarta Schedulazione Aggiuntiva - Step 3 - Modalità
      default: "aspira"  
      selector:
        select:
          options: ["aspira", "lava", "pulisci", "cleangenius", "cleangenius_deep"]
          
    schedule4_step3_rooms:
      name: 🏠 Quarta Schedulazione Aggiuntiva - Step 3 - Stanze
      description: |
        **ID numerici (2,3,4) o nomi stanze separati da virgola. Lascia vuoto per tutta la casa.**
      default: ""
      
    schedule4_max_wait:
      name: ⏱️ Quarta Schedulazione Aggiuntiva - Timeout Attesa (minuti)
      default: 60
      selector:
        number:
          min: 10
          max: 180
          unit_of_measurement: "min"

# =========================================
# === TRIGGERS E AZIONI ===
# =========================================
trigger:
  - platform: time
    at: !input morning_time
    id: morning
  - platform: time  
    at: !input evening_time
    id: evening
  - platform: time
    at: !input schedule1_time
    id: schedule1
  - platform: time
    at: !input schedule2_time
    id: schedule2
  - platform: time
    at: !input schedule3_time
    id: schedule3
  - platform: time
    at: !input schedule4_time
    id: schedule4
  # Reset flag giornaliero
  - platform: time
    at: "23:59:00"
    id: reset_flag

variables:
  # Entità principali
  vacuum_ent: !input vacuum_entity
  robot_status: !input robot_status_sensor
  valid_states: !input valid_robot_states
  presence_ent: !input presence_entity
  pres_val: !input presence_value
  flag_cleaned: !input flag_cleaned_today
  notification_targets: !input notification_targets
  debug_enabled: !input debug_mode

action:
  # === RESET FLAG GIORNALIERO ===
  - if:
      - condition: template
        value_template: "{{ trigger.id == 'reset_flag' }}"
    then:
      - if:
          - condition: template
            value_template: "{{ debug_enabled }}"
        then:
          - service: system_log.write
            data:
              message: "[DREAME BLUEPRINT] 🌙 Reset flag pulizia giornaliero"
              level: info
      - service: input_boolean.turn_off
        target:
          entity_id: "{{ flag_cleaned }}"
      - stop: "Reset flag completato"

  # === LOGICA PRINCIPALE ===
  - choose:
      # ===== MATTINA =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'morning' }}"
          - condition: template
            value_template: "{{ morning_on }}"
          - condition: template
            value_template: |
              {% set current_weekday = now().strftime('%A').lower() %}
              {{ current_weekday in morning_weekdays }}
          - condition: template
            value_template: |
              {% if morning_schedule_template != '' %}
                {{ morning_schedule_template | bool }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: |
              {% if robot_status != '' %}
                {{ states(robot_status) in valid_states }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: |
              {% if presence_ent != '' %}
                {{ states(presence_ent) == pres_val }}
              {% else %}
                true
              {% endif %}
        sequence:
          - variables:
              slot_name: "MATTINA"
              slot_preset: !input morning_preset
              slot_rooms: !input morning_rooms
              slot_sequential: !input morning_sequential
              slot_step2_preset: !input morning_step2_preset
              slot_step2_rooms: !input morning_step2_rooms
              slot_step3_preset: !input morning_step3_preset
              slot_step3_rooms: !input morning_step3_rooms
              slot_max_wait: !input morning_max_wait
          - sequence: &execute_cleaning_sequence
              # === LOG DEBUG ===
              - if:
                  - condition: template
                    value_template: "{{ debug_enabled }}"
                then:
                  - service: system_log.write
                    data:
                      message: >
                        [DREAME BLUEPRINT] 🚀 Avvio pulizia {{ slot_name }}
                        - Preset: {{ slot_preset }}
                        - Stanze: {{ slot_rooms }}
                        - Sequenziale: {{ slot_sequential }}
                        - Robot Status: {{ states(robot_status) if robot_status != '' else 'N/A' }}
                        - Flag Cleaned: {{ states(flag_cleaned) }}
                      level: info
              
              # === NOTIFICA INIZIO ===
              - if:
                  - condition: template
                    value_template: "{{ notification_targets != '' }}"
                then:
                  - repeat:
                      count: >
                        {{ notification_targets.split(',') | length }}
                      sequence:
                        - service: tts.speak
                          target:
                            entity_id: >
                              {{ notification_targets.split(',')[repeat.index - 1].strip() }}
                          data:
                            message: >
                              Avvio pulizia {{ slot_name.lower() }}
                              {% if slot_rooms != '' %}
                              nelle stanze: {{ slot_rooms }}
                              {% endif %}
              
              # === PULIZIA STEP 1 ===
              - variables:
                  preset_now: "{{ slot_preset }}"
                  rooms_now: "{{ slot_rooms }}"
              - sequence: &run_cleaning_step
                  - variables:
                      rooms_list: >
                        {% if rooms_now == '' %}
                          []
                        {% else %}
                          {% set room_ids = [] %}
                          {% for room in rooms_now.split(',') %}
                            {% set room = room.strip() %}
                            {% if room.isdigit() %}
                              {% set room_ids = room_ids + [room|int] %}
                            {% else %}
                              {% for entity in states.sensor %}
                                {% if entity.entity_id.startswith(vacuum_ent ~ '_room_') and entity.attributes.get('friendly_name', '').lower() == room.lower() %}
                                  {% set room_ids = room_ids + [entity.state|int] %}
                                {% endif %}
                              {% endfor %}
                            {% endif %}
                          {% endfor %}
                          {{ room_ids }}
                        {% endif %}
                        
                  - choose:
                      # CleanGenius modalità
                      - conditions: 
                          - condition: template
                            value_template: "{{ preset_now in ['cleangenius', 'cleangenius_deep'] }}"
                        sequence:
                          - service: select.select_option
                            target:
                              entity_id: "{{ vacuum_ent }}_cleangenius"  
                            data:
                              option: >
                                {% if preset_now == 'cleangenius_deep' %}
                                  cleaning_route
                                {% else %}
                                  standard_cleaning
                                {% endif %}
                          - if:
                              - condition: template
                                value_template: "{{ rooms_list | length > 0 }}"
                            then:
                              - service: vacuum.send_command
                                target:
                                  entity_id: "{{ vacuum_ent }}"
                                data:
                                  command: app_segment_clean
                                  params: "{{ rooms_list }}"
                            else:
                              - service: vacuum.start
                                target:
                                  entity_id: "{{ vacuum_ent }}"
                                  
                      # Modalità standard
                      - conditions: 
                          - condition: template
                            value_template: "{{ preset_now in ['aspira', 'lava', 'pulisci'] }}"
                        sequence:
                          - service: select.select_option
                            target:
                              entity_id: "{{ vacuum_ent }}_cleaning_mode"
                            data:
                              option: >
                                {% if preset_now == 'aspira' %}
                                  vacuuming
                                {% elif preset_now == 'lava' %}
                                  mopping
                                {% else %}
                                  vacuuming_and_mopping  
                                {% endif %}
                          - if:
                              - condition: template
                                value_template: "{{ rooms_list | length > 0 }}"
                            then:
                              - service: vacuum.send_command
                                target:
                                  entity_id: "{{ vacuum_ent }}"
                                data:
                                  command: app_segment_clean
                                  params: "{{ rooms_list }}"
                            else:
                              - service: vacuum.start
                                target:
                                  entity_id: "{{ vacuum_ent }}"
              
              # === ATTESA COMPLETAMENTO PER STEP SUCCESSIVI ===
              - if:
                  - condition: template
                    value_template: "{{ slot_sequential and (slot_step2_preset != '' or slot_step3_preset != '') }}"
                then:
                  - if:
                      - condition: template
                        value_template: "{{ debug_enabled }}"
                    then:
                      - service: system_log.write
                        data:
                          message: "[DREAME BLUEPRINT] ⏳ Attesa completamento Step 1..."
                          level: info
                  
                  - wait_for_trigger:
                      - platform: state
                        entity_id: "{{ robot_status if robot_status != '' else vacuum_ent }}"
                        to: ["idle", "sleeping", "charging", "docked"]
                        for: "00:00:10"
                    timeout: "{{ (slot_max_wait * 60) | int }}"
                    
                  - if:
                      - condition: template
                        value_template: "{{ wait.completed }}"
                      - condition: template
                        value_template: "{{ slot_step2_preset != '' }}"
                    then:
                      # === PULIZIA STEP 2 ===
                      - if:
                          - condition: template
                            value_template: "{{ debug_enabled }}"
                        then:
                          - service: system_log.write
                            data:
                              message: "[DREAME BLUEPRINT] 🚀 Avvio Step 2"
                              level: info
                      
                      - variables:
                          preset_now: "{{ slot_step2_preset }}"
                          rooms_now: "{{ slot_step2_rooms }}"
                      - sequence: *run_cleaning_step
                      
                      # === ATTESA PER STEP 3 ===
                      - if:
                          - condition: template
                            value_template: "{{ slot_step3_preset != '' }}"
                        then:
                          - wait_for_trigger:
                              - platform: state
                                entity_id: "{{ robot_status if robot_status != '' else vacuum_ent }}"
                                to: ["idle", "sleeping", "charging", "docked"]
                                for: "00:00:10"
                            timeout: "{{ (slot_max_wait * 60) | int }}"
                            
                          - if:
                              - condition: template
                                value_template: "{{ wait.completed }}"
                            then:
                              # === PULIZIA STEP 3 ===
                              - if:
                                  - condition: template
                                    value_template: "{{ debug_enabled }}"
                                then:
                                  - service: system_log.write
                                    data:
                                      message: "[DREAME BLUEPRINT] 🚀 Avvio Step 3"
                                      level: info
                              
                              - variables:
                                  preset_now: "{{ slot_step3_preset }}"
                                  rooms_now: "{{ slot_step3_rooms }}"
                              - sequence: *run_cleaning_step
              
              # === IMPOSTA FLAG PULIZIA ===
              - service: input_boolean.turn_on
                target:
                  entity_id: "{{ flag_cleaned }}"
                  
              # === NOTIFICA COMPLETAMENTO ===
              - if:
                  - condition: template
                    value_template: "{{ notification_targets != '' }}"
                then:
                  - repeat:
                      count: >
                        {{ notification_targets.split(',') | length }}
                      sequence:
                        - service: tts.speak
                          target:
                            entity_id: >
                              {{ notification_targets.split(',')[repeat.index - 1].strip() }}
                          data:
                            message: "Pulizia {{ slot_name.lower() }} avviata con successo"

      # ===== SERA (CON LOGICA ADATTIVA) =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'evening' }}"
          - condition: template
            value_template: "{{ evening_on }}"
          - condition: template
            value_template: |
              {% set current_weekday = now().strftime('%A').lower() %}
              {{ current_weekday in evening_weekdays }}
          - condition: template
            value_template: |
              {% if evening_schedule_template != '' %}
                {{ evening_schedule_template | bool }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: |
              {% if robot_status != '' %}
                {{ states(robot_status) in valid_states }}
              {% else %}
                true
              {% endif %}
          - condition: template
            value_template: |
              {% if presence_ent != '' %}
                {{ states(presence_ent) == pres_val }}
              {% else %}
                true
              {% endif %}
        sequence:
          # === LOGICA ADATTIVA ===
          - choose:
              # Skip se già pulito
              - conditions:
                  - condition: template
                    value_template: "{{ evening_conditional == 'skip_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ debug_enabled }}"
                    then:
                      - service: system_log.write
                        data:
                          message: "[DREAME BLUEPRINT] ⏭️ Pulizia SERA saltata - già pulito oggi"
                          level: info
                  - stop: "Pulizia già effettuata oggi"
              
              # Esegui solo se non pulito
              - conditions:
                  - condition: template
                    value_template: "{{ evening_conditional == 'fallback_if_not_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'off') }}"
                sequence:
                  - variables:
                      slot_name: "SERA (Recupero)"
                      slot_preset: !input evening_preset
                      slot_rooms: !input evening_rooms
                      slot_sequential: !input evening_sequential
                      slot_step2_preset: !input evening_step2_preset
                      slot_step2_rooms: !input evening_step2_rooms
                      slot_step3_preset: !input evening_step3_preset
                      slot_step3_rooms: !input evening_step3_rooms
                      slot_max_wait: !input evening_max_wait
                  - sequence: *execute_cleaning_sequence
              
              # Adatta modalità se già pulito
              - conditions:
                  - condition: template
                    value_template: "{{ evening_conditional == 'adapt_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - variables:
                      slot_name: "SERA (Modalità Leggera)"
                      slot_preset: !input evening_fallback_preset
                      slot_rooms: !input evening_fallback_rooms
                      slot_sequential: !input evening_sequential
                      slot_step2_preset: !input evening_step2_preset
                      slot_step2_rooms: !input evening_step2_rooms
                      slot_step3_preset: !input evening_step3_preset
                      slot_step3_rooms: !input evening_step3_rooms
                      slot_max_wait: !input evening_max_wait
                  - sequence: *execute_cleaning_sequence
              
              # Esegui sempre (modalità normale)
              - conditions: []
                sequence:
                  - variables:
                      slot_name: "SERA"
                      slot_preset: !input evening_preset
                      slot_rooms: !input evening_rooms
                      slot_sequential: !input evening_sequential
                      slot_step2_preset: !input evening_step2_preset
                      slot_step2_rooms: !input evening_step2_rooms
                      slot_step3_preset: !input evening_step3_preset
                      slot_step3_rooms: !input evening_step3_rooms
                      slot_max_wait: !input evening_max_wait
                  - sequence: *execute_cleaning_sequence

      # ===== PRIMA SCHEDULAZIONE AGGIUNTIVA =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'schedule1' }}"
          - condition: template
            value_template: "{{ schedule1_on }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ schedule1_conditional == 'skip_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - if:
                      - condition: template
                        value_template: "{{ debug_enabled }}"
                    then:
                      - service: system_log.write
                        data:
                          message: "[DREAME BLUEPRINT] ⏭️ Prima Schedulazione saltata - già pulito oggi"
                          level: info
                  - stop: "Pulizia già effettuata oggi"
              
              - conditions:
                  - condition: template
                    value_template: "{{ schedule1_conditional == 'fallback_if_not_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'off') }}"
                sequence:
                  - variables:
                      slot_name: "PRIMA SCHEDULAZIONE (Recupero)"
                      slot_preset: !input schedule1_preset
                      slot_rooms: !input schedule1_rooms
                      slot_sequential: !input schedule1_sequential
                      slot_step2_preset: !input schedule1_step2_preset
                      slot_step2_rooms: !input schedule1_step2_rooms
                      slot_step3_preset: !input schedule1_step3_preset
                      slot_step3_rooms: !input schedule1_step3_rooms
                      slot_max_wait: !input schedule1_max_wait
                  - sequence: *execute_cleaning_sequence
              
              - conditions:
                  - condition: template
                    value_template: "{{ schedule1_conditional == 'adapt_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - variables:
                      slot_name: "PRIMA SCHEDULAZIONE (Modalità Leggera)"
                      slot_preset: !input schedule1_fallback_preset
                      slot_rooms: !input schedule1_fallback_rooms
                      slot_sequential: !input schedule1_sequential
                      slot_step2_preset: !input schedule1_step2_preset
                      slot_step2_rooms: !input schedule1_step2_rooms
                      slot_step3_preset: !input schedule1_step3_preset
                      slot_step3_rooms: !input schedule1_step3_rooms
                      slot_max_wait: !input schedule1_max_wait
                  - sequence: *execute_cleaning_sequence
              
              - conditions: []
                sequence:
                  - variables:
                      slot_name: "PRIMA SCHEDULAZIONE"
                      slot_preset: !input schedule1_preset
                      slot_rooms: !input schedule1_rooms
                      slot_sequential: !input schedule1_sequential
                      slot_step2_preset: !input schedule1_step2_preset
                      slot_step2_rooms: !input schedule1_step2_rooms
                      slot_step3_preset: !input schedule1_step3_preset
                      slot_step3_rooms: !input schedule1_step3_rooms
                      slot_max_wait: !input schedule1_max_wait
                  - sequence: *execute_cleaning_sequence

      # ===== SECONDA SCHEDULAZIONE AGGIUNTIVA =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'schedule2' }}"
          - condition: template
            value_template: "{{ schedule2_on }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ schedule2_conditional == 'skip_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - stop: "Pulizia già effettuata oggi"
              
              - conditions:
                  - condition: template
                    value_template: "{{ schedule2_conditional == 'fallback_if_not_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'off') }}"
                sequence:
                  - variables:
                      slot_name: "SECONDA SCHEDULAZIONE (Recupero)"
                      slot_preset: !input schedule2_preset
                      slot_rooms: !input schedule2_rooms
                      slot_sequential: !input schedule2_sequential
                      slot_step2_preset: !input schedule2_step2_preset
                      slot_step2_rooms: !input schedule2_step2_rooms
                      slot_step3_preset: !input schedule2_step3_preset
                      slot_step3_rooms: !input schedule2_step3_rooms
                      slot_max_wait: !input schedule2_max_wait
                  - sequence: *execute_cleaning_sequence
              
              - conditions:
                  - condition: template
                    value_template: "{{ schedule2_conditional == 'adapt_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - variables:
                      slot_name: "SECONDA SCHEDULAZIONE (Modalità Leggera)"
                      slot_preset: !input schedule2_fallback_preset
                      slot_rooms: !input schedule2_fallback_rooms
                      slot_sequential: !input schedule2_sequential
                      slot_step2_preset: !input schedule2_step2_preset
                      slot_step2_rooms: !input schedule2_step2_rooms
                      slot_step3_preset: !input schedule2_step3_preset
                      slot_step3_rooms: !input schedule2_step3_rooms
                      slot_max_wait: !input schedule2_max_wait
                  - sequence: *execute_cleaning_sequence
              
              - conditions: []
                sequence:
                  - variables:
                      slot_name: "SECONDA SCHEDULAZIONE"
                      slot_preset: !input schedule2_preset
                      slot_rooms: !input schedule2_rooms
                      slot_sequential: !input schedule2_sequential
                      slot_step2_preset: !input schedule2_step2_preset
                      slot_step2_rooms: !input schedule2_step2_rooms
                      slot_step3_preset: !input schedule2_step3_preset
                      slot_step3_rooms: !input schedule2_step3_rooms
                      slot_max_wait: !input schedule2_max_wait
                  - sequence: *execute_cleaning_sequence

      # ===== TERZA SCHEDULAZIONE AGGIUNTIVA =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'schedule3' }}"
          - condition: template
            value_template: "{{ schedule3_on }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ schedule3_conditional == 'skip_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - stop: "Pulizia già effettuata oggi"
              
              - conditions:
                  - condition: template
                    value_template: "{{ schedule3_conditional == 'fallback_if_not_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'off') }}"
                sequence:
                  - variables:
                      slot_name: "TERZA SCHEDULAZIONE (Recupero)"
                      slot_preset: !input schedule3_preset
                      slot_rooms: !input schedule3_rooms
                      slot_sequential: !input schedule3_sequential
                      slot_step2_preset: !input schedule3_step2_preset
                      slot_step2_rooms: !input schedule3_step2_rooms
                      slot_step3_preset: !input schedule3_step3_preset
                      slot_step3_rooms: !input schedule3_step3_rooms
                      slot_max_wait: !input schedule3_max_wait
                  - sequence: *execute_cleaning_sequence
              
              - conditions:
                  - condition: template
                    value_template: "{{ schedule3_conditional == 'adapt_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - variables:
                      slot_name: "TERZA SCHEDULAZIONE (Modalità Leggera)"
                      slot_preset: !input schedule3_fallback_preset
                      slot_rooms: !input schedule3_fallback_rooms
                      slot_sequential: !input schedule3_sequential
                      slot_step2_preset: !input schedule3_step2_preset
                      slot_step2_rooms: !input schedule3_step2_rooms
                      slot_step3_preset: !input schedule3_step3_preset
                      slot_step3_rooms: !input schedule3_step3_rooms
                      slot_max_wait: !input schedule3_max_wait
                  - sequence: *execute_cleaning_sequence
              
              - conditions: []
                sequence:
                  - variables:
                      slot_name: "TERZA SCHEDULAZIONE"
                      slot_preset: !input schedule3_preset
                      slot_rooms: !input schedule3_rooms
                      slot_sequential: !input schedule3_sequential
                      slot_step2_preset: !input schedule3_step2_preset
                      slot_step2_rooms: !input schedule3_step2_rooms
                      slot_step3_preset: !input schedule3_step3_preset
                      slot_step3_rooms: !input schedule3_step3_rooms
                      slot_max_wait: !input schedule3_max_wait
                  - sequence: *execute_cleaning_sequence

      # ===== QUARTA SCHEDULAZIONE AGGIUNTIVA =====
      - conditions:
          - condition: template
            value_template: "{{ trigger.id == 'schedule4' }}"
          - condition: template
            value_template: "{{ schedule4_on }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ schedule4_conditional == 'skip_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - stop: "Pulizia già effettuata oggi"
              
              - conditions:
                  - condition: template
                    value_template: "{{ schedule4_conditional == 'fallback_if_not_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'off') }}"
                sequence:
                  - variables:
                      slot_name: "QUARTA SCHEDULAZIONE (Recupero)"
                      slot_preset: !input schedule4_preset
                      slot_rooms: !input schedule4_rooms
                      slot_sequential: !input schedule4_sequential
                      slot_step2_preset: !input schedule4_step2_preset
                      slot_step2_rooms: !input schedule4_step2_rooms
                      slot_step3_preset: !input schedule4_step3_preset
                      slot_step3_rooms: !input schedule4_step3_rooms
                      slot_max_wait: !input schedule4_max_wait
                  - sequence: *execute_cleaning_sequence
              
              - conditions:
                  - condition: template
                    value_template: "{{ schedule4_conditional == 'adapt_if_cleaned' }}"
                  - condition: template
                    value_template: "{{ is_state(flag_cleaned, 'on') }}"
                sequence:
                  - variables:
                      slot_name: "QUARTA SCHEDULAZIONE (Modalità Leggera)"
                      slot_preset: !input schedule4_fallback_preset
                      slot_rooms: !input schedule4_fallback_rooms
                      slot_sequential: !input schedule4_sequential
                      slot_step2_preset: !input schedule4_step2_preset
                      slot_step2_rooms: !input schedule4_step2_rooms
                      slot_step3_preset: !input schedule4_step3_preset
                      slot_step3_rooms: !input schedule4_step3_rooms
                      slot_max_wait: !input schedule4_max_wait
                  - sequence: *execute_cleaning_sequence
              
              - conditions: []
                sequence:
                  - variables:
                      slot_name: "QUARTA SCHEDULAZIONE"
                      slot_preset: !input schedule4_preset
                      slot_rooms: !input schedule4_rooms
                      slot_sequential: !input schedule4_sequential
                      slot_step2_preset: !input schedule4_step2_preset
                      slot_step2_rooms: !input schedule4_step2_rooms
                      slot_step3_preset: !input schedule4_step3_preset
                      slot_step3_rooms: !input schedule4_step3_rooms
                      slot_max_wait: !input schedule4_max_wait
                  - sequence: *execute_cleaning_sequence

mode: single
max_exceeded: silent
