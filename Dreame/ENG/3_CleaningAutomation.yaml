blueprint:
  name: Dreame Scheduled Cleaning (Simple or Advanced, with Presence Sensor)
  description: >
    This blueprint lets you **automate Dreame robot cleanings**
    based on a daily or weekly schedule, with the option to
    include presence checks and a cleaning-state tracking system.

    **Available modes:**
    - **Simple:** set two cleaning times (morning and evening).  
    - **Advanced:** up to **4 customized cleaning times** per day of the week.

    You can select rooms to clean by **ID** or **name** (if configured in the map),
    and optionally enable a **presence check** so cleaning only runs when
    the house is empty (useful if you rely on a sensor or a presence counter).

    **Supported cleaning modes:**
    - *Vacuum* → vacuum only  
    - *Mop* → mop only  
    - *Cleaning* → **CleanGenius** mode (vacuum + mop)  
    - *Deep Cleaning* → **CleanGenius Deep** (more thorough cleaning)

    **Automatic cleaning-state management:**
    The blueprint uses an `input_boolean` (e.g. `input_boolean.cleaned_today`)
    to **track whether the house has already been cleaned today**:
    - It is automatically **turned ON** after each completed cleaning.  
    - It is **reset at midnight** by a dedicated automation.
    
    This mechanism helps with daily planning, allowing you to avoid duplicate
    cleanings on the same day or to adapt the evening run based on what happened
    in the morning (e.g., “if you already mopped the kitchen this morning, skip
    the evening session, or vacuum the kitchen only”).

  domain: automation
  source_url: https://raw.githubusercontent.com/Magnum9O/HA_BluePrints/main/Dreame/ENG/3_CleaningAutomation.yaml

  input:

  vacuum_entity:
    name: Dreame Robot
    description: Select your Dreame vacuum.
    selector:
      entity:
        domain: vacuum

  map_camera:
    name: Map
    description: Select the camera that exposes the 'rooms' attribute (e.g., camera.YourRobot_map) generated with the Vacuum Map card. Required.
    selector:
      entity:
        domain: camera

  cleaned_today_helper:
    name: Cleaning Performed flag
    description: Boolean that turns on after cleaning and is reset every day at the chosen time.
    selector:
      entity:
        domain: input_boolean

  reset_time:
    name: Daily reset time
    description: Time at which to turn off the “Cleaning Performed” flag.
    default: "23:59:00"
    selector:
      time: {}

  presence_helper:
    name: Presence helper (optional)
    description: Presence-control entity; if set, the automation runs only when its value matches “Required presence value”.
    default: ""
    selector:
      entity: {}

  presence_required_value:
    name: Required presence value (optional)
    description: Examples, 1, home, on. If empty, presence is ignored.
    default: ""

  # --- Morning (always available) ---
  morning_enabled:
    name: Enable morning schedule
    default: false
    selector:
      boolean: {}

  morning_time:
    name: Morning cleaning time
    default: "08:30:00"
    selector:
      time: {}

  morning_days:
    name: Morning days
    description: Days of the week (leave empty for all days).
    default: []
    selector:
      select:
        options: [mon, tue, wed, thu, fri, sat, sun]
        multiple: true
        sort: false

  morning_preset:
    name: Morning mode
    default: genius
    selector:
      select:
        options:
          - label: "Vacuum only"
            value: sweeping
          - label: "Mop only"
            value: mopping
          - label: "Vacuum and mop"
            value: sweeping_and_mopping
          - label: "Mop after vacuum"
            value: mopping_after_sweeping
          - label: "CleanGenius"
            value: genius
          - label: "CleanGenius Deep"
            value: genius_deep
        multiple: false
        custom_value: false

  morning_rooms:
    name: Morning rooms
    description: Examples, "2,3,4" or "Kitchen,Bathroom". If empty → whole house.
    default: ""

  # --- Evening (always available) ---
  evening_enabled:
    name: Enable evening schedule
    default: false
    selector:
      boolean: {}

  evening_time:
    name: Evening cleaning time
    default: "18:00:00"
    selector:
      time: {}

  evening_days:
    name: Evening days
    description: Days of the week (leave empty for all days).
    default: []
    selector:
      select:
        options: [mon, tue, wed, thu, fri, sat, sun]
        multiple: true
        sort: false

  evening_preset:
    name: Evening mode
    default: genius
    selector:
      select:
        options:
          - label: "Vacuum only"
            value: sweeping
          - label: "Mop only"
            value: mopping
          - label: "Vacuum and mop"
            value: sweeping_and_mopping
          - label: "Mop after vacuum"
            value: mopping_after_sweeping
          - label: "CleanGenius"
            value: genius
          - label: "CleanGenius Deep"
            value: genius_deep
        multiple: false
        custom_value: false

  evening_rooms:
    name: Evening rooms
    description: Examples, "2,3,4" or "Kitchen,Bathroom". If empty → whole house.
    default: ""

  # --- Advanced blocks A–D (always available) ---
  blockA_enabled:
    name: Enable block A
    default: false
    selector:
      boolean: {}

  blockA_time:
    name: Block A time
    default: "09:00:00"
    selector:
      time: {}

  blockA_days:
    name: Block A days
    default: []
    selector:
      select:
        options: [mon, tue, wed, thu, fri, sat, sun]
        multiple: true
        sort: false

  blockA_preset:
    name: Block A mode
    default: sweeping
    selector:
      select:
        options:
          - label: "Vacuum only"
            value: sweeping
          - label: "Mop only"
            value: mopping
          - label: "Vacuum and mop"
            value: sweeping_and_mopping
          - label: "Mop after vacuum"
            value: mopping_after_sweeping
          - label: "CleanGenius"
            value: genius
          - label: "CleanGenius Deep"
            value: genius_deep
        multiple: false
        custom_value: false

  blockA_rooms:
    name: Block A rooms
    description: Examples, "2,3,4" or "Kitchen,Bathroom". If empty → whole house.
    default: ""

  blockB_enabled:
    name: Enable block B
    default: false
    selector:
      boolean: {}

  blockB_time:
    name: Block B time
    default: "10:30:00"
    selector:
      time: {}

  blockB_days:
    name: Block B days
    default: []
    selector:
      select:
        options: [mon, tue, wed, thu, fri, sat, sun]
        multiple: true
        sort: false

  blockB_preset:
    name: Block B mode
    default: mopping
    selector:
      select:
        options:
          - label: "Vacuum only"
            value: sweeping
          - label: "Mop only"
            value: mopping
          - label: "Vacuum and mop"
            value: sweeping_and_mopping
          - label: "Mop after vacuum"
            value: mopping_after_sweeping
          - label: "CleanGenius"
            value: genius
          - label: "CleanGenius Deep"
            value: genius_deep
        multiple: false
        custom_value: false

  blockB_rooms:
    name: Block B rooms
    description: Examples, "2,3,4" or "Kitchen,Bathroom". If empty → whole house.
    default: ""

  blockC_enabled:
    name: Enable block C
    default: false
    selector:
      boolean: {}

  blockC_time:
    name: Block C time
    default: "15:00:00"
    selector:
      time: {}

  blockC_days:
    name: Block C days
    default: []
    selector:
      select:
        options: [mon, tue, wed, thu, fri, sat, sun]
        multiple: true
        sort: false

  blockC_preset:
    name: Block C mode
    default: genius
    selector:
      select:
        options:
          - label: "Vacuum only"
            value: sweeping
          - label: "Mop only"
            value: mopping
          - label: "Vacuum and mop"
            value: sweeping_and_mopping
          - label: "Mop after vacuum"
            value: mopping_after_sweeping
          - label: "CleanGenius"
            value: genius
          - label: "CleanGenius Deep"
            value: genius_deep
        multiple: false
        custom_value: false

  blockC_rooms:
    name: Block C rooms
    description: Examples, "2,3,4" or "Kitchen,Bathroom". If empty → whole house.
    default: ""

  blockD_enabled:
    name: Enable block D
    default: false
    selector:
      boolean: {}

  blockD_time:
    name: Block D time
    default: "18:30:00"
    selector:
      time: {}

  blockD_days:
    name: Block D days
    default: []
    selector:
      select:
        options: [mon, tue, wed, thu, fri, sat, sun]
        multiple: true
        sort: false

  blockD_preset:
    name: Block D mode
    default: genius_deep
    selector:
      select:
        options:
          - label: "Vacuum only"
            value: sweeping
          - label: "Mop only"
            value: mopping
          - label: "Vacuum and mop"
            value: sweeping_and_mopping
          - label: "Mop after vacuum"
            value: mopping_after_sweeping
          - label: "CleanGenius"
            value: genius
          - label: "CleanGenius Deep"
            value: genius_deep
        multiple: false
        custom_value: false

  blockD_rooms:
    name: Block D rooms
    description: Examples, "2,3,4" or "Kitchen,Bathroom". If empty → whole house.
    default: ""

mode: restart
max_exceeded: silent

variables:
  vac: !input vacuum_entity
  map_ent: !input map_camera
  flag_cleaned: !input cleaned_today_helper
  presence_ent: !input presence_helper
  pres_val: !input presence_required_value
    # Derive select entity_ids from the vacuum name
  robot_slug: "{{ vac.split('.')[1] }}"
  cg_sel: "select.{{ robot_slug }}_cleangenius"
  cm_sel: "select.{{ robot_slug }}_cleaning_mode"


  # Morning
  m_on: !input morning_enabled
  m_time: !input morning_time
  m_days: !input morning_days
  m_preset: !input morning_preset
  m_rooms: !input morning_rooms

  # Evening
  e_on: !input evening_enabled
  e_time: !input evening_time
  e_days: !input evening_days
  e_preset: !input evening_preset
  e_rooms: !input evening_rooms

  # Blocks
  a_on: !input blockA_enabled
  a_time: !input blockA_time
  a_days: !input blockA_days
  a_preset: !input blockA_preset
  a_rooms: !input blockA_rooms

  b_on: !input blockB_enabled
  b_time: !input blockB_time
  b_days: !input blockB_days
  b_preset: !input blockB_preset
  b_rooms: !input blockB_rooms

  c_on: !input blockC_enabled
  c_time: !input blockC_time
  c_days: !input blockC_days
  c_preset: !input blockC_preset
  c_rooms: !input blockC_rooms

  d_on: !input blockD_enabled
  d_time: !input blockD_time
  d_days: !input blockD_days
  d_preset: !input blockD_preset
  d_rooms: !input blockD_rooms

trigger:
  - platform: time
    at: !input reset_time
    id: reset

  - platform: time
    at: "{{ m_time }}"
    id: morning

  - platform: time
    at: "{{ e_time }}"
    id: evening

  - platform: time
    at: "{{ a_time }}"
    id: blockA

  - platform: time
    at: "{{ b_time }}"
    id: blockB

  - platform: time
    at: "{{ c_time }}"
    id: blockC

  - platform: time
    at: "{{ d_time }}"
    id: blockD

condition: []

action:
  - choose:
      - conditions: "{{ trigger.id == 'reset' }}"
        sequence:
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ flag_cleaned }}"

      - conditions: >
          {{ trigger.id == 'morning'
             and m_on
             and (m_days | count == 0 or now().isoweekday() in
                  [1 if 'mon' in m_days else 0,
                   2 if 'tue' in m_days else 0,
                   3 if 'wed' in m_days else 0,
                   4 if 'thu' in m_days else 0,
                   5 if 'fri' in m_days else 0,
                   6 if 'sat' in m_days else 0,
                   7 if 'sun' in m_days else 0]) }}
        sequence:
          - choose:
              - conditions: >
                  {{ presence_ent != '' and pres_val != '' and states(presence_ent) != pres_val }}
                sequence: []
            default:
              - variables:
                  preset_now: "{{ m_preset }}"
                  rooms_now: "{{ m_rooms }}"
              - sequence: &run_clean
                - variables:
                    raw_rooms: "{{ rooms_now | string | trim }}"
                    # If raw_rooms is empty → whole house (an empty list is interpreted as “all segments” by the scripts)
                    seg_list: >
                      {% set txt = raw_rooms %}
                      {% if txt == '' %}
                        []
                      {% else %}
                        {% set parts = txt.split(',') | map('trim') | list %}
                        {% set rdict = state_attr(map_ent, 'rooms') or {} %}
                        {% set out = [] %}
                        {% for p in parts %}
                          {% if p|int|string == p %}
                            {% set out = out + [ p|int ] %}
                          {% else %}
                            {% set rid = (rdict|selectattr('1.name','equalto',p)|map(attribute='1.room_id')|list|first) %}
                            {% if rid is not none %}
                              {% set out = out + [ rid|int ] %}
                            {% endif %}
                          {% endif %}
                        {% endfor %}
                        {{ out }}
                      {% endif %}
                - choose:
                    - conditions: "{{ preset_now in ['sweeping','mopping','sweeping_and_mopping','mopping_after_sweeping'] }}"
                      sequence:
                        - service: select.select_option
                          target:
                            entity_id: select.{{ states(vac).split('.')[0] if false else 'ambrogio_cleangenius_2' }}
                          data:
                            option: "off"
                        - wait_template: "{{ states(cg_sel) in ['off','unknown','unavailable','none'] }}"
                          timeout: "00:00:08"
                          continue_on_timeout: true
                        - service: select.select_option
                          target:
                            entity_id: "{{ cm_sel }}"
                          data:
                            option: "{{ preset_now }}"
                        - wait_template: "{{ states(cm_sel) == preset_now }}"
                          timeout: "00:00:08"
                          continue_on_timeout: true
                        - service: dreame_vacuum.vacuum_clean_segment
                          target:
                            entity_id: "{{ vac }}"
                          data:
                            segments: "{{ seg_list }}"
                    - conditions: "{{ preset_now == 'genius' }}"
                      sequence:
                        - service: select.select_option
                          target:
                            entity_id: "{{ cg_sel }}"
                          data:
                            option: "routine_cleaning"
                        - wait_template: "{{ states(cg_sel) in ['routine_cleaning','unknown','unavailable','none'] }}"
                          timeout: "00:00:08"
                          continue_on_timeout: true
                        - service: dreame_vacuum.vacuum_clean_segment
                          target:
                            entity_id: "{{ vac }}"
                          data:
                            segments: "{{ seg_list }}"
                    - conditions: "{{ preset_now == 'genius_deep' }}"
                      sequence:
                        - service: select.select_option
                          target:
                            entity_id: "{{ cg_sel }}"
                          data:
                            option: "deep_cleaning"
                        - wait_template: "{{ states(cg_sel) in ['deep_cleaning','unknown','unavailable','none'] }}"
                          timeout: "00:00:08"
                          continue_on_timeout: true
                        - service: dreame_vacuum.vacuum_clean_segment
                          target:
                            entity_id: "{{ vac }}"
                          data:
                            segments: "{{ seg_list }}"
                - service: input_boolean.turn_on
                  target:
                    entity_id: "{{ flag_cleaned }}"

      - conditions: >
          {{ trigger.id == 'evening'
             and e_on
             and (e_days | count == 0 or now().isoweekday() in
                  [1 if 'mon' in e_days else 0,
                   2 if 'tue' in e_days else 0,
                   3 if 'wed' in e_days else 0,
                   4 if 'thu' in e_days else 0,
                   5 if 'fri' in e_days else 0,
                   6 if 'sat' in e_days else 0,
                   7 if 'sun' in e_days else 0]) }}
        sequence:
          - choose:
              - conditions: >
                  {{ presence_ent != '' and pres_val != '' and states(presence_ent) != pres_val }}
                sequence: []
            default:
              - variables: { preset_now: "{{ e_preset }}", rooms_now: "{{ e_rooms }}" }
              - sequence: *run_clean

      - conditions: "{{ trigger.id == 'blockA' and a_on and (a_days | count == 0 or now().isoweekday() in [1 if 'mon' in a_days else 0,2 if 'tue' in a_days else 0,3 if 'wed' in a_days else 0,4 if 'thu' in a_days else 0,5 if 'fri' in a_days else 0,6 if 'sat' in a_days else 0,7 if 'sun' in a_days else 0]) }}"
        sequence:
          - variables: { preset_now: "{{ a_preset }}", rooms_now: "{{ a_rooms }}" }
          - sequence: *run_clean

      - conditions: "{{ trigger.id == 'blockB' and b_on and (b_days | count == 0 or now().isoweekday() in [1 if 'mon' in b_days else 0,2 if 'tue' in b_days else 0,3 if 'wed' in b_days else 0,4 if 'thu' in b_days else 0,5 if 'fri' in b_days else 0,6 if 'sat' in b_days else 0,7 if 'sun' in b_days else 0]) }}"
        sequence:
          - variables: { preset_now: "{{ b_preset }}", rooms_now: "{{ b_rooms }}" }
          - sequence: *run_clean

      - conditions: "{{ trigger.id == 'blockC' and c_on and (c_days | count == 0 or now().isoweekday() in [1 if 'mon' in c_days else 0,2 if 'tue' in c_days else 0,3 if 'wed' in c_days else 0,4 if 'thu' in c_days else 0,5 if 'fri' in c_days else 0,6 if 'sat' in c_days else 0,7 if 'sun' in c_days else 0]) }}"
        sequence:
          - variables: { preset_now: "{{ c_preset }}", rooms_now: "{{ c_rooms }}" }
          - sequence: *run_clean

      - conditions: "{{ trigger.id == 'blockD' and d_on and (d_days | count == 0 or now().isoweekday() in [1 if 'mon' in d_days else 0,2 if 'tue' in d_days else 0,3 if 'wed' in d_days else 0,4 if 'thu' in d_days else 0,5 if 'fri' in d_days else 0,6 if 'sat' in d_days else 0,7 if 'sun' in d_days else 0]) }}"
        sequence:
          - variables: { preset_now: "{{ d_preset }}", rooms_now: "{{ d_rooms }}" }
          - sequence: *run_clean

