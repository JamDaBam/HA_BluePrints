blueprint:
  name: "Dreame: Aggiorna elenco stanze"
  description: |
    Questo blueprint crea uno script che legge l'attributo ``rooms`` della mappa
    tasshack e aggiorna un helper `input_select` con l'elenco delle stanze.

    Ogni voce dell'elenco viene formata concatenando il nome della stanza e il suo
    ``room_id`` fra parentesi, ad esempio ``Cucina (3)``. Questo formato può
    tornare utile in altri blueprint per recuperare l'ID del segmento a partire
    dal nome.

    Prima di utilizzare questo blueprint devi creare manualmente un helper
    `input_select` tramite l'interfaccia di Home Assistant (Impostazioni → Dispositivi
    e servizi → Helper → Aggiungi → Input Select). Lascia l'elenco delle opzioni
    vuoto oppure inserisci temporaneamente un valore segnaposto; questo script
    sostituirà o integrerà la lista esistente con le stanze rilevate.

    Una volta eseguito lo script creato dal blueprint, l'`input_select` conterrà
    tutte le stanze rilevate sulla mappa più eventuali opzioni personalizzate
    aggiunte manualmente. Potrai quindi utilizzarlo in altri blueprint o
    automazioni per scegliere una stanza senza dover digitare il nome.
  domain: script
  source_url: https://raw.githubusercontent.com/Magnum9O/HA_BluePrints/main/blueprints/BP_Dreame_Automation/dreame_update_rooms.yaml
  input:
    map_camera:
      name: "Mappa del robot"
      description: "Seleziona la camera tasshack che contiene l'attributo 'rooms'."
      selector:
        entity:
          domain: camera
    select_entity:
      name: "Input Select per le stanze"
      description: "Seleziona l'helper input_select da aggiornare con i nomi delle stanze."
      selector:
        entity:
          domain: input_select

sequence:
  # Estrarre la lista dei nomi delle stanze dall'attributo rooms
  - variables:
      # Copia le entità di input in variabili locali per evitare errori di Jinja quando gli input non sono definiti
      map_ent: !input map_camera
      select_ent: !input select_entity
      # Costruisci una lista delle stanze formattate come "Nome (ID)" partendo dall'attributo rooms.
      # Se l'attributo è assente o vuoto, restituisci una lista vuota. Evitiamo il test ``is mapping``
      # poiché l'oggetto restituito da ``state_attr`` potrebbe non essere interpretato come mappatura
      # da Jinja, anche se è un dizionario.
      room_options: >-
        {#
          Usa il filtro ``dictsort`` per iterare sull'attributo ``rooms``. ``dictsort`` restituisce
          una lista di coppie [chiave, valore] ordinata per chiave. Per accumulare le
          opzioni utilizziamo un oggetto ``namespace`` che mantiene lo stato anche
          all'interno del ciclo. Se manca il nome o l'ID all'interno del dizionario, utilizziamo
          la chiave stessa come ripiego.
        #}
        {% set ns = namespace(opts=[]) %}
        {% set rooms = state_attr(map_ent, 'rooms') %}
        {% if rooms %}
          {% for pair in rooms | dictsort %}
            {% set key = pair[0] %}
            {% set val = pair[1] %}
            {% set name = (val['name'] if 'name' in val else key) %}
            {% set rid = (val['room_id'] if 'room_id' in val else key) %}
            {% set ns.opts = ns.opts + [name ~ ' (' ~ rid ~ ')'] %}
          {% endfor %}
        {% endif %}
        {{ ns.opts }}
      # Recupera la lista attuale di opzioni dell'input_select. Se non è una sequenza restituisci lista vuota.
      existing_options: >-
        {% set opts = state_attr(select_ent, 'options') %}
        {{ opts if opts is sequence else [] }}
      # Costruisci la lista unione mantenendo l'ordine: opzioni esistenti seguite dalle nuove che non sono già presenti.
      merged_options: >-
        {% set ns = namespace(merged = existing_options + []) %}
        {% for item in room_options %}
          {% if item not in ns.merged %}
            {% set ns.merged = ns.merged + [item] %}
          {% endif %}
        {% endfor %}
        {{ ns.merged }}
  # Aggiornare l'input_select con la nuova lista (solo se ci sono stanze)
  - choose:
      # Se c'è almeno una stanza, aggiorna l'input_select con la lista unita
      - conditions:
          - condition: template
            value_template: "{{ room_options | length > 0 }}"
        sequence:
          - service: input_select.set_options
            data:
              entity_id: "{{ select_ent }}"
              options: "{{ merged_options }}"
      # Altrimenti, notifica che non sono state trovate stanze
      - conditions: []
        sequence:
          - service: persistent_notification.create
            data:
              title: "Aggiornamento stanze"
              message: >-
                Non sono state trovate stanze nell'attributo 'rooms' della mappa {{ map_ent }}.
                Assicurati che l'integrazione tasshack abbia creato la mappa e che il robot abbia
                generato un layout con le stanze.
