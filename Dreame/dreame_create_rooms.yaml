blueprint:
  name: "Dreame: Debug aggiornamento stanze"
  description: |
    Questo blueprint di debug aiuta a comprendere cosa vede lo script quando
    legge l'attributo ``rooms`` della mappa tasshack. Oltre ad aggiornare
    l'`input_select` con l'elenco delle stanze (come nella versione
    standard), questo blueprint invia una notifica persistente con il contenuto
    di `rooms` e la lista ``room_options`` che viene utilizzata per
    popolare l'helper.

    **Prerequisiti:**
      - Devi avere installato l'integrazione Dreame tasshack e avere una mappa
        generata dal robot, con l'attributo ``rooms`` popolato.
      - Devi creare manualmente un `input_select` vuoto (o con opzioni
        provvisorie) tramite l'interfaccia di Home Assistant. Lo script
        aggiungerà o aggiornerà le opzioni con le stanze rilevate.

    Dopo l'esecuzione dello script creato da questo blueprint, vedrai una
    notifica con la rappresentazione grezza delle stanze e l'elenco
    ``room_options`` creato. Questo può aiutare a capire se l'attributo
    ``rooms`` è vuoto o se ci sono problemi nel template.
  domain: script
  source_url: https://raw.githubusercontent.com/Magnum9O/HA_BluePrints/main/blueprints/BP_Dreame_Automation/dreame_update_rooms_debug.yaml
  input:
    map_camera:
      name: "Mappa del robot"
      description: "Seleziona la camera tasshack che contiene l'attributo 'rooms'."
      selector:
        entity:
          domain: camera
    select_entity:
      name: "Input Select per le stanze"
      description: "Seleziona l'helper input_select da aggiornare con i nomi delle stanze."
      selector:
        entity:
          domain: input_select

sequence:
  # Variabili locali per map entità e input select
  - variables:
      map_ent: !input map_camera
      select_ent: !input select_entity
      # Risultato grezzo dell'attributo rooms
      rooms_raw: >-
        {{ state_attr(map_ent, 'rooms') }}
      # Costruisci una lista delle stanze formattate come "Nome (ID)" partendo dall'attributo rooms.
      room_options: >-
        {#
          Usa ``dict2items`` per iterare sull'attributo ``rooms``. Non effettuiamo test
          ``is mapping`` perché i valori possono essere semplici dizionari non riconosciuti
          come mapping da Jinja. Per ciascun elemento estraiamo il nome e l'ID stanza;
          se una delle due proprietà non è presente, utilizziamo la chiave stessa come
          valore di riserva.
        #}
        {% set opts = [] %}
        {% set rooms = state_attr(map_ent, 'rooms') %}
        {% if rooms %}
          {% for item in rooms | dict2items %}
            {% set val = item.value %}
            {% set name = val['name'] if 'name' in val else val.name if val.name is defined else item.key %}
            {% set rid = val['room_id'] if 'room_id' in val else val.room_id if val.room_id is defined else item.key %}
            {% set label = name ~ ' (' ~ rid ~ ')' %}
            {% set opts = opts + [label] %}
          {% endfor %}
        {% endif %}
        {{ opts }}
      # Recupera la lista attuale di opzioni dell'input_select. Se non è una lista, restituisci lista vuota.
      existing_options: >-
        {% set opts = state_attr(select_ent, 'options') %}
        {{ opts if opts is sequence else [] }}
      # Crea la lista unione mantenendo l'ordine
      merged_options: >-
        {% set merged = existing_options + [] %}
        {% for item in room_options %}
          {% if item not in merged %}
            {% set merged = merged + [item] %}
          {% endif %}
        {% endfor %}
        {{ merged }}

  # Invia notifica di debug
  - service: persistent_notification.create
    data:
      title: "Debug stanze Dreame"
      message: >-
        rooms_raw: {{ rooms_raw }}
        \n\nroom_options ("Nome (ID)"): {{ room_options }}

  # Aggiorna l'input_select se ci sono stanze
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ room_options | length > 0 }}"
        sequence:
          - service: input_select.set_options
            data:
              entity_id: "{{ select_ent }}"
              options: "{{ merged_options }}"
      - conditions: []
        sequence:
          - service: persistent_notification.create
            data:
              title: "Aggiornamento stanze"
              message: >-
                ultimo debug Non sono state trovate stanze nell'attributo 'rooms' della mappa {{ map_ent }}.
                Assicurati che l'integrazione tasshack abbia creato la mappa e che il robot abbia
                generato un layout con le stanze.   
