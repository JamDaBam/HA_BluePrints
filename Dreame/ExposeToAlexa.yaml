blueprint:
  name: Dreame · Script Alexa (stanze dinamiche, stile "setup di Magnum")
  description: >
    Crea uno script da esporre ad Alexa per avviare la pulizia di una stanza del Dreame
    usando i segment ID dalla mappa tasshack.
    • Invocazione con Alexa (Nabu Casa): dì "avvia <nome script>" oppure "apri <nome script>".
    • Consiglio: duplica questo script dalla GUI per creare versioni per ciascuna stanza/modalità.
    • Opzioni incluse: aggiornamento elenco stanze, preservazione della selezione, stanza forzata,
      profilo/logica di pulizia (livello aspirazione, acqua, passate) se supportati dal tuo modello.

  domain: script
  input:
    map_camera:
      name: Mappa tasshack (camera.*)
      selector:
        entity:
          domain: camera
    select_entity:
      name: Input select stanze ("Nome (ID)")
      selector:
        entity:
          domain: input_select
    vacuum_entity:
      name: Entità aspirapolvere (vacuum.*)
      selector:
        entity:
          domain: vacuum

    update_rooms_before:
      name: Aggiorna elenco stanze prima di eseguire
      description: Sostituisce completamente le opzioni dell'input_select con i valori letti dalla mappa
      default: false
      selector:
        boolean: {}

    preserve_selection:
      name: Preserva selezione stanza dopo il refresh
      description: Se attivo, dopo il refresh prova a ripristinare la stanza che era selezionata
      default: true
      selector:
        boolean: {}

    forced_room_label:
      name: Stanza forzata per questo script ("Nome (ID)")
      description: Se impostata (es. "Kitchen (3)"), lo script userà sempre questa stanza (ideale per Alexa)
      default: ""
      selector:
        text: {}

    cleaning_profile:
      name: Tipo di pulizia (logica)
      description: Etichetta logica/descrittiva; i servizi chiamati dipendono dagli input sotto
      default: aspirazione
      selector:
        select:
          options:
            - aspirazione
            - lavaggio
            - pulizia
            - pulizia profonda

    suction_level:
      name: Livello aspirazione (opzionale)
      description: Se supportato (1..4). Vuoto = non cambiare
      default:
      selector:
        number:
          min: 1
          max: 4
          step: 1
          mode: slider

    water_volume:
      name: Quantità acqua (opzionale)
      description: Se supportato (1..3). Vuoto = non cambiare
      default:
      selector:
        number:
          min: 1
          max: 3
          step: 1
          mode: slider

    cleaning_passes:
      name: Numero passate (opzionale)
      description: Se supportato (1..3). Vuoto = non cambiare
      default:
      selector:
        number:
          min: 1
          max: 3
          step: 1
          mode: slider

    notify_debug:
      name: Notifica di debug
      default: false
      selector:
        boolean: {}

mode: single

sequence:
  - variables:
      map_ent: !input map_camera
      select_ent: !input select_entity
      vac: !input vacuum_entity
      do_refresh: !input update_rooms_before
      preserve: !input preserve_selection
      forced_label: !input forced_room_label
      profile: !input cleaning_profile
      s_level: !input suction_level
      w_vol: !input water_volume
      passes: !input cleaning_passes
      debug: !input notify_debug
      prev_option: "{{ states(select_ent) }}"

  # (Opzionale) Aggiorna elenco stanze sostituendo TUTTE le opzioni
  - if:
      - condition: template
        value_template: "{{ do_refresh }}"
    then:
      - variables:
          room_options: >-
            {% set ns = namespace(opts=[]) %}
            {% set rooms = state_attr(map_ent, 'rooms') %}
            {% if rooms %}
              {% for pair in rooms | dictsort %}
                {% set key = pair[0] %}
                {% set val = pair[1] %}
                {% set name = (val['name'] if 'name' in val else key) %}
                {% set rid = (val['room_id'] if 'room_id' in val else key) %}
                {% set ns.opts = ns.opts + [name ~ ' (' ~ rid ~ ')'] %}
              {% endfor %}
            {% endif %}
            {{ ns.opts }}
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ room_options | length > 0 }}"
            sequence:
              - service: input_select.set_options
                data:
                  entity_id: "{{ select_ent }}"
                  options: "{{ room_options }}"
              # Stanza forzata prioritaria
              - if:
                  - condition: template
                    value_template: "{{ forced_label | length > 0 and forced_label in room_options }}"
                then:
                  - service: input_select.select_option
                    data:
                      entity_id: "{{ select_ent }}"
                      option: "{{ forced_label }}"
                else:
                  # In mancanza di forzatura, prova a ripristinare la precedente
                  - if:
                      - condition: template
                        value_template: "{{ preserve and prev_option in room_options }}"
                    then:
                      - service: input_select.select_option
                        data:
                          entity_id: "{{ select_ent }}"
                          option: "{{ prev_option }}"
        default:
          - service: persistent_notification.create
            data:
              title: "Dreame · Script Alexa"
              message: >-
                Nessuna stanza trovata in {{ map_ent }} (attributo 'rooms'). Verifica integrazione tasshack e mappa.

  # Se NON ho appena refreshato o se voglio forzare comunque, seleziona la stanza forzata (se impostata)
  - if:
      - condition: template
        value_template: "{{ forced_label | length > 0 }}"
    then:
      - service: input_select.select_option
        data:
          entity_id: "{{ select_ent }}"
          option: "{{ forced_label }}"

  # Parametri opzionali (se supportati dal modello)
  - choose:
      - conditions: "{{ s_level is number }}"
        sequence:
          - service: dreame_vacuum.vacuum_set_fan_speed
            data:
              entity_id: "{{ vac }}"
              speed_level: "{{ s_level | int }}"
      - conditions: "{{ w_vol is number }}"
        sequence:
          - service: dreame_vacuum.vacuum_set_water_volume
            data:
              entity_id: "{{ vac }}"
              volume: "{{ w_vol | int }}"
      - conditions: "{{ passes is number }}"
        sequence:
          - service: dreame_vacuum.vacuum_set_cleaning_passes
            data:
              entity_id: "{{ vac }}"
              passes: "{{ passes | int }}"

  # Estrai ID segmento dalla voce selezionata ("Nome (ID)")
  - variables:
      selected_option: "{{ states(select_ent) }}"
      segment_id: >-
        {% set opt = selected_option | default('') %}
        {% if '(' in opt and ')' in opt %}
          {{ opt.split('(')[-1].split(')')[0] | int }}
        {% else %}
          {{ opt | int(default=-1) }}
        {% endif %}

  # Avvio pulizia stanza (segmento)
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ segment_id | int(-1) >= 0 }}"
        sequence:
          - service: dreame_vacuum.vacuum_clean_segment
            data:
              entity_id: "{{ vac }}"
              segments: ["{{ segment_id | int }}"]
          - if:
              - condition: template
                value_template: "{{ debug }}"
            then:
              - service: persistent_notification.create
                data:
                  title: "Dreame · Script Alexa"
                  message: >-
                    Avviata '{{ profile }}' su {{ selected_option }} (segment {{ segment_id }}).
    default:
      - service: persistent_notification.create
        data:
          title: "Dreame · Script Alexa"
          message: >-
            Impossibile determinare l'ID stanza da '{{ selected_option }}'.
            Assicurati che l'input_select abbia voci nel formato 'Nome (ID)'.
