blueprint:
  name: Dreame · Script Alexa (stanza da index, duplicabile)
  description: >
    Crea uno script per avviare la pulizia di una **stanza** del Dreame usando i segment ID letti
    dalla mappa tasshack e dall'index (input_select). Pensato per essere **duplicato** dalla GUI:
    una istanza = uno script (esponibile ad Alexa).
    • Invocazione Alexa (Nabu Casa): dì **"avvia <nome script>"** oppure **"apri <nome script>"**.
    • Flusso consigliato:
      1) Seleziona la stanza nell'helper `input_select` popolato dal Blueprint Index Stanze,
      2) Attiva "Cattura stanza dall’helper", salva/esegui una volta → memorizzata in `input_text`,
      3) Disattiva la cattura: lo script userà sempre quella stanza (perfetto per Alexa),
      4) Duplica lo script per ogni altra stanza/modalità che ti serve.
  domain: script
  input:
    map_camera:
      name: Mappa tasshack (camera.*)
      selector:
        entity:
          domain: camera

    select_entity:
      name: Helper index stanze ("Nome (ID)")
      description: Input select popolato dal Blueprint Index Stanze (contiene voci tipo "Cucina (3)")
      selector:
        entity:
          domain: input_select

    vacuum_entity:
      name: Entità aspirapolvere (vacuum.*)
      selector:
        entity:
          domain: vacuum

    # Opzionale: refresh dell'elenco stanze (di solito NON serve: lo fa il BP#1)
    update_rooms_before:
      name: Aggiorna elenco stanze prima di eseguire
      description: Sostituisce TUTTE le opzioni dell'input_select con quelle lette dalla mappa
      default: false
      selector:
        boolean: {}

    # Meccanismo "seleziona senza scrivere": cattura dall'helper e salva in un input_text
    capture_from_helper_now:
      name: Cattura stanza dall’helper adesso
      description: Se attivo, alla prossima esecuzione prende la stanza dall'helper e la salva in input_text, che diventa la stanza "bloccata" per questo script.
      default: false
      selector:
        boolean: {}

    room_lock_text:
      name: Input text dove salvare la stanza bloccata ("Nome (ID)")
      description: Lascialo vuoto se non vuoi memorizzare; consigliato per script fissi esposti ad Alexa
      default: ""
      selector:
        entity:
          domain: input_text

    # Profilo/parametri (opzionali, se supportati dal modello)
    cleaning_profile:
      name: Tipo di pulizia
      default: aspirazione
      selector:
        select:
          options:
            - aspirazione
            - lavaggio
            - pulizia
            - pulizia profonda

    suction_level:
      name: Livello aspirazione (opzionale)
      description: 1..4 se supportato. Vuoto = non cambiare
      default:
      selector:
        number:
          min: 1
          max: 4
          step: 1
          mode: slider

    water_volume:
      name: Quantità acqua (opzionale)
      description: 1..3 se supportato. Vuoto = non cambiare
      default:
      selector:
        number:
          min: 1
          max: 3
          step: 1
          mode: slider

    cleaning_passes:
      name: Numero passate (opzionale)
      description: 1..3 se supportato. Vuoto = non cambiare
      default:
      selector:
        number:
          min: 1
          max: 3
          step: 1
          mode: slider

    notify_debug:
      name: Notifica di debug
      default: false
      selector:
        boolean: {}

mode: single

sequence:
  - variables:
      map_ent: !input map_camera
      select_ent: !input select_entity
      vac: !input vacuum_entity
      do_refresh: !input update_rooms_before
      capture_now: !input capture_from_helper_now
      room_lock_ent: !input room_lock_text
      profile: !input cleaning_profile
      s_level: !input suction_level
      w_vol: !input water_volume
      passes: !input cleaning_passes
      debug: !input notify_debug
      prev_option: "{{ states(select_ent) }}"

  # (Opzionale) Refresh elenco stanze nell'input_select (sostituzione completa)
  - if:
      - condition: template
        value_template: "{{ do_refresh }}"
    then:
      - variables:
          room_options: >-
            {% set ns = namespace(opts=[]) %}
            {% set rooms = state_attr(map_ent, 'rooms') %}
            {% if rooms %}
              {% for pair in rooms | dictsort %}
                {% set key = pair[0] %}
                {% set val = pair[1] %}
                {% set name = (val['name'] if 'name' in val else key) %}
                {% set rid = (val['room_id'] if 'room_id' in val else key) %}
                {% set ns.opts = ns.opts + [name ~ ' (' ~ rid ~ ')'] %}
              {% endfor %}
            {% endif %}
            {{ ns.opts }}
      - choose:
          - conditions:
              - condition: template
                value_template: "{{ room_options | length > 0 }}"
            sequence:
              - service: input_select.set_options
                data:
                  entity_id: "{{ select_ent }}"
                  options: "{{ room_options }}"
              - choose:
                  - conditions:
                      - condition: template
                        value_template: "{{ prev_option in room_options }}"
                    sequence:
                      - service: input_select.select_option
                        data:
                          entity_id: "{{ select_ent }}"
                          option: "{{ prev_option }}"
        default:
          - service: persistent_notification.create
            data:
              title: "Dreame · Script Alexa"
              message: >-
                Nessuna stanza trovata in {{ map_ent }} (attributo 'rooms'). Verifica integrazione tasshack e mappa.

  # Se richiesto: cattura la stanza dall'helper e memorizzala nell'input_text (diventa stanza "bloccata")
  - choose:
      - conditions:
          - condition: template
            value_template: >-
              {{ capture_now and room_lock_ent is string and room_lock_ent | length > 0 }}
        sequence:
          - variables:
              helper_choice: "{{ states(select_ent) | default('') }}"
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ helper_choice | length > 0 }}"
                sequence:
                  - service: input_text.set_value
                    data:
                      entity_id: "{{ room_lock_ent }}"
                      value: "{{ helper_choice }}"
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ debug }}"
                        sequence:
                          - service: persistent_notification.create
                            data:
                              title: "Dreame · Script Alexa"
                              message: "Memorizzata stanza: {{ helper_choice }} in {{ room_lock_ent }}"

  # Parametri opzionali (se supportati dal modello)
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ s_level is number }}"
        sequence:
          - service: dreame_vacuum.vacuum_set_fan_speed
            data:
              entity_id: "{{ vac }}"
              speed_level: "{{ s_level | int }}"
      - conditions:
          - condition: template
            value_template: "{{ w_vol is number }}"
        sequence:
          - service: dreame_vacuum.vacuum_set_water_volume
            data:
              entity_id: "{{ vac }}"
              volume: "{{ w_vol | int }}"
      - conditions:
          - condition: template
            value_template: "{{ passes is number }}"
        sequence:
          - service: dreame_vacuum.vacuum_set_cleaning_passes
            data:
              entity_id: "{{ vac }}"
              passes: "{{ passes | int }}"

  # Determina la stanza finale: preferisci input_text (bloccata), altrimenti usa la selezione attuale dell'helper
  - variables:
      locked_label: >-
        {% if room_lock_ent is string and room_lock_ent | length > 0 %}
          {{ states(room_lock_ent) | default('') }}
        {% else %}
          {{ '' }}
        {% endif %}
      selected_label: "{{ locked_label if locked_label | length > 0 else states(select_ent) | default('') }}"
      segment_id: >-
        {% set opt = selected_label | default('') %}
        {% if '(' in opt and ')' in opt %}
          {{ opt.split('(')[-1].split(')')[0] | int }}
        {% else %}
          {{ opt | int(default=-1) }}
        {% endif %}

  # Avvio pulizia del segmento (stanza)
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ segment_id | int(-1) >= 0 }}"
        sequence:
          - service: dreame_vacuum.vacuum_clean_segment
            data:
              entity_id: "{{ vac }}"
              segments: ["{{ segment_id | int }}"]
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ debug }}"
                sequence:
                  - service: persistent_notification.create
                    data:
                      title: "Dreame · Script Alexa"
                      message: "Avviata '{{ profile }}' su {{ selected_label }} (segment {{ segment_id }})"
    default:
      - service: persistent_notification.create
        data:
          title: "Dreame · Script Alexa"
          message: >-
            Impossibile determinare l'ID stanza da '{{ selected_label }}'.
            Assicurati che l'input_select contenga voci nel formato 'Nome (ID)'.
