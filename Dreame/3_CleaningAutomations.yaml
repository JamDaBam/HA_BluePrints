blueprint:
  name: Dreame – Pianificazione avanzata (Semplice/Avanzata + Blocchi A–D)
  description: >
    Pianifica pulizie Dreame per stanze specifiche con modalità **Semplice (mattina/sera)**
    oppure **Avanzata (blocchi A–D)**. Supporta preset "Pulizia" e "Pulizia profonda"
    (CleanGenius attivo), "Sola Aspirazione" e "Solo Lavaggio" (CleanGenius off).
    Come funziona la modalità semplice? Imposto la pulizia delle stanze ad orari predefiniti e nei giorni stabiliti.
    Come funziona la modalità avanzata? Posso diversificare la pulizia in base ai giorni della settimana, quindi
    decidere di pulire 2 stanze il martedì e il giovedì e altre tre il mercoledì e il venerdì, ecc.
    Attivare la modalità avanzata **NON esclude la modalità semplice!** 
    Opzionalmente si può attivare un controllo presenza e un reset del flag "Pulizia Effettuata" a fine giornata.
  domain: automation
  source_url: https://github.com/Magnum9O/HA_BluePrints/blob/main/Dreame/ScheduledCleaningAdvanced.yaml

input:
  vacuum_entity:
    name: Robot Dreame
    description: "Entità vacuum del robot (es. vacuum.ambrogio)."
    selector:
      entity:
        domain: vacuum

  map_camera:
    name: Mappa
    description: "Camera mappa di tasshack/Vacuum Map Card con attributo 'rooms'."
    default: ""
    selector:
      entity:
        domain: camera
        multiple: false

  presence_helper:
    name: Helper presenza (opzionale)
    description: "Counter/boolean usato come presenza. Se impostato, la pulizia parte solo se il valore richiesto coincide."
    default: ""
    selector:
      entity:
        multiple: false

  presence_required_value:
    name: Valore richiesto per presenza (opzionale)
    description: "Esempio: '1' (in casa) oppure '0' (via). Confronto testuale."
    default: ""

  cleaned_today_helper:
    name: Flag “Pulizia Effettuata” (input_boolean)
    description: "Viene attivato al termine della routine e resettato a fine giornata."
    selector:
      entity:
        domain: input_boolean

  reset_time:
    name: Orario reset giornaliero del flag "Pulizia Effettuata"
    default: "23:59:00"
    selector:
      time: {}

  simple_mode_enabled:
    name: Abilita modalità semplice (Pulizia mattina/sera)
    description: "Se ON, usa solo Mattina/Sera. Se usi anche i blocchi, entrambi potranno attivarsi."
    default: true
    selector:
      boolean: {}

  advanced_mode_enabled:
    name: Abilita opzioni avanzate (blocchi A–D)
    description: "Se ON, abilita la pianificazione per blocchi giornalieri A–D."
    default: false
    selector:
      boolean: {}

  morning_enabled:
    name: Mattina – Abilita
    default: true
    selector:
      boolean: {}

  morning_time:
    name: Mattina – Orario
    default: "09:00:00"
    selector:
      time: {}

  morning_days:
    name: Mattina – Giorni
    default: [mon,tue,wed,thu,fri]
    selector:
      select:
        mode: list
        multiple: true
        options: [mon,tue,wed,thu,fri,sat,sun]

  morning_preset:
    name: Mattina – Preset
    default: "Pulizia"
    selector:
      select:
        options: ["Pulizia","Pulizia profonda","Aspirazione","Lavaggio"]

  morning_rooms:
    name: Mattina – Stanze (ID o nomi separati da virgola)
    description: "Esempi: '2,3,4' oppure 'Kitchen,Bathroom'. Se usi nomi, serve 'Mappa' sopra."
    default: ""
    selector:
      text: {}

  evening_enabled:
    name: Sera – Abilita
    default: false
    selector:
      boolean: {}

  evening_time:
    name: Sera – Orario
    default: "19:00:00"
    selector:
      time: {}

  evening_days:
    name: Sera – Giorni
    default: [mon,tue,wed,thu,fri]
    selector:
      select:
        mode: list
        multiple: true
        options: [mon,tue,wed,thu,fri,sat,sun]

  evening_preset:
    name: Sera – Preset
    default: "Pulizia"
    selector:
      select:
        options: ["Pulizia","Pulizia profonda","Aspirazione","Lavaggio"]

  evening_rooms:
    name: Sera – Stanze (ID o nomi separati da virgola)
    default: ""
    selector:
      text: {}

  blockA_enabled:
    name: Blocco A – Abilita
    default: false
    selector:
      boolean: {}
  blockA_time:
    name: Blocco A – Orario
    default: "08:30:00"
    selector:
      time: {}
  blockA_days:
    name: Blocco A – Giorni
    default: []
    selector:
      select:
        mode: list
        multiple: true
        options: [mon,tue,wed,thu,fri,sat,sun]
  blockA_preset:
    name: Blocco A – Preset
    default: "Pulizia"
    selector:
      select:
        options: ["Pulizia","Pulizia profonda","Aspirazione","Lavaggio"]
  blockA_rooms:
    name: Blocco A – Stanze (ID o nomi separati da virgola)
    default: ""
    selector:
      text: {}

  blockB_enabled:
    name: Blocco B – Abilita
    default: false
    selector:
      boolean: {}
  blockB_time:
    name: Blocco B – Orario
    default: "12:30:00"
    selector:
      time: {}
  blockB_days:
    name: Blocco B – Giorni
    default: []
    selector:
      select:
        mode: list
        multiple: true
        options: [mon,tue,wed,thu,fri,sat,sun]
  blockB_preset:
    name: Blocco B – Preset
    default: "Pulizia"
    selector:
      select:
        options: ["Pulizia","Pulizia profonda","Aspirazione","Lavaggio"]
  blockB_rooms:
    name: Blocco B – Stanze (ID o nomi separati da virgola)
    default: ""
    selector:
      text: {}

  blockC_enabled:
    name: Blocco C – Abilita
    default: false
    selector:
      boolean: {}
  blockC_time:
    name: Blocco C – Orario
    default: "17:00:00"
    selector:
      time: {}
  blockC_days:
    name: Blocco C – Giorni
    default: []
    selector:
      select:
        mode: list
        multiple: true
        options: [mon,tue,wed,thu,fri,sat,sun]
  blockC_preset:
    name: Blocco C – Preset
    default: "Pulizia"
    selector:
      select:
        options: ["Pulizia","Pulizia profonda","Aspirazione","Lavaggio"]
  blockC_rooms:
    name: Blocco C – Stanze (ID o nomi separati da virgola)
    default: ""
    selector:
      text: {}

  blockD_enabled:
    name: Blocco D – Abilita
    default: false
    selector:
      boolean: {}
  blockD_time:
    name: Blocco D – Orario
    default: "21:00:00"
    selector:
      time: {}
  blockD_days:
    name: Blocco D – Giorni
    default: []
    selector:
      select:
        mode: list
        multiple: true
        options: [mon,tue,wed,thu,fri,sat,sun]
  blockD_preset:
    name: Blocco D – Preset
    default: "Pulizia"
    selector:
      select:
        options: ["Pulizia","Pulizia profonda","Aspirazione","Lavaggio"]
  blockD_rooms:
    name: Blocco D – Stanze (ID o nomi separati da virgola)
    default: ""
    selector:
      text: {}

mode: single
max_exceeded: silent

variables:
  vac: !input vacuum_entity
  map_cam: !input map_camera
  presence_ent: !input presence_helper
  presence_required: !input presence_required_value
  flag_cleaned: !input cleaned_today_helper

  simple_on: !input simple_mode_enabled
  adv_on: !input advanced_mode_enabled

  morning_on: !input morning_enabled
  morning_time_in: !input morning_time
  morning_days_in: !input morning_days
  morning_preset_in: !input morning_preset
  morning_rooms_in: !input morning_rooms

  evening_on: !input evening_enabled
  evening_time_in: !input evening_time
  evening_days_in: !input evening_days
  evening_preset_in: !input evening_preset
  evening_rooms_in: !input evening_rooms

  A_on: !input blockA_enabled
  A_time: !input blockA_time
  A_days: !input blockA_days
  A_preset: !input blockA_preset
  A_rooms: !input blockA_rooms

  B_on: !input blockB_enabled
  B_time: !input blockB_time
  B_days: !input blockB_days
  B_preset: !input blockB_preset
  B_rooms: !input blockB_rooms

  C_on: !input blockC_enabled
  C_time: !input blockC_time
  C_days: !input blockC_days
  C_preset: !input blockC_preset
  C_rooms: !input blockC_rooms

  D_on: !input blockD_enabled
  D_time: !input blockD_time
  D_days: !input blockD_days
  D_preset: !input blockD_preset
  D_rooms: !input blockD_rooms

trigger:
  - platform: time
    at: !input morning_time
    id: morning
  - platform: time
    at: !input evening_time
    id: evening
  - platform: time
    at: !input blockA_time
    id: blockA
  - platform: time
    at: !input blockB_time
    id: blockB
  - platform: time
    at: !input blockC_time
    id: blockC
  - platform: time
    at: !input blockD_time
    id: blockD
  - platform: time
    at: !input reset_time
    id: midnight_reset

condition: []

action:
  - choose:
      - conditions:
          - condition: trigger
            id: midnight_reset
        sequence:
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ flag_cleaned }}"
          - stop: "Reset effettuato"

      - conditions:
          - condition: trigger
            id: morning
          - condition: template
            value_template: "{{ simple_on and morning_on }}"
          - condition: template
            value_template: "{{ ['mon','tue','wed','thu','fri','sat','sun'][now().weekday()] in morning_days_in }}"
          - condition: template
            value_template: >-
              {% if presence_ent and presence_required|length > 0 %}
                {{ states(presence_ent) == presence_required }}
              {% else %}
                true
              {% endif %}
        sequence:
          - variables:
              _preset: "{{ morning_preset_in }}"
              _rooms: "{{ morning_rooms_in }}"
          - choose:
              - conditions: []
                sequence: &clean_sequence
                  - variables:
                      segments: >-
                        {% set txt = (_rooms or '') | string %}
                        {% set parts = txt.split(',') | map('trim') | list %}
                        {% set segs = [] %}
                        {% if parts|length == 0 or (parts|length == 1 and parts[0] == '') %}
                          []
                        {% else %}
                          {% for p in parts %}
                            {% if p|regex_match('^\d+$') %}
                              {% set segs = segs + [ p | int ] %}
                            {% else %}
                              {% set rooms = state_attr(map_cam, 'rooms') if map_cam else none %}
                              {% if rooms %}
                                {% set found = namespace(id=null) %}
                                {% for k, v in rooms.items() %}
                                  {% if (v.name | default(v['name'], true)) | string | lower == p | lower %}
                                    {% set found.id = v.room_id | default(v['room_id'], true) %}
                                  {% endif %}
                                {% endfor %}
                                {% if found.id is not none %}
                                  {% set segs = segs + [ found.id | int ] %}
                                {% endif %}
                              {% endif %}
                            {% endif %}
                          {% endfor %}
                          {{ segs }}
                        {% endif %}
                  - condition: template
                    value_template: "{{ segments | count > 0 }}"
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ _preset | lower in ['pulizia','pulizia profonda'] }}"
                        sequence:
                          - service: select.select_option
                            target:
                              entity_id: >-
                                {{ 'select.' ~ (vac.split('.')[-1]) ~ '_cleangenius_2' }}
                            data:
                              option: >-
                                {{ 'deep_cleaning' if _preset | lower == 'pulizia profonda' else 'routine_cleaning' }}
                      - conditions:
                          - condition: template
                            value_template: "{{ _preset | lower in ['aspirazione','lavaggio'] }}"
                        sequence:
                          - service: select.select_option
                            target:
                              entity_id: >-
                                {{ 'select.' ~ (vac.split('.')[-1]) ~ '_cleangenius_2' }}
                            data:
                              option: "off"
                  - service: dreame_vacuum.vacuum_clean_segment
                    target:
                      entity_id: "{{ vac }}"
                    data:
                      segments: "{{ segments }}"
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ flag_cleaned }}"
          - stop: "Eseguito (Mattina)"

      - conditions:
          - condition: trigger
            id: evening
          - condition: template
            value_template: "{{ simple_on and evening_on }}"
          - condition: template
            value_template: "{{ ['mon','tue','wed','thu','fri','sat','sun'][now().weekday()] in evening_days_in }}"
          - condition: template
            value_template: >-
              {% if presence_ent and presence_required|length > 0 %}
                {{ states(presence_ent) == presence_required }}
              {% else %}
                true
              {% endif %}
        sequence:
          - variables:
              _preset: "{{ evening_preset_in }}"
              _rooms: "{{ evening_rooms_in }}"
          - choose:
              - conditions: []
                sequence: *clean_sequence
          - stop: "Eseguito (Sera)"

      - conditions:
          - condition: trigger
            id: blockA
          - condition: template
            value_template: "{{ adv_on and A_on }}"
          - condition: template
            value_template: "{{ ['mon','tue','wed','thu','fri','sat','sun'][now().weekday()] in A_days }}"
          - condition: template
            value_template: >-
              {% if presence_ent and presence_required|length > 0 %}
                {{ states(presence_ent) == presence_required }}
              {% else %}
                true
              {% endif %}
        sequence:
          - variables:
              _preset: "{{ A_preset }}"
              _rooms: "{{ A_rooms }}"
          - choose:
              - conditions: []
                sequence: *clean_sequence
          - stop: "Eseguito (Blocco A)"

      - conditions:
          - condition: trigger
            id: blockB
          - condition: template
            value_template: "{{ adv_on and B_on }}"
          - condition: template
            value_template: "{{ ['mon','tue','wed','thu','fri','sat','sun'][now().weekday()] in B_days }}"
          - condition: template
            value_template: >-
              {% if presence_ent and presence_required|length > 0 %}
                {{ states(presence_ent) == presence_required }}
              {% else %}
                true
              {% endif %}
        sequence:
          - variables:
              _preset: "{{ B_preset }}"
              _rooms: "{{ B_rooms }}"
          - choose:
              - conditions: []
                sequence: *clean_sequence
          - stop: "Eseguito (Blocco B)"

      - conditions:
          - condition: trigger
            id: blockC
          - condition: template
            value_template: "{{ adv_on and C_on }}"
          - condition: template
            value_template: "{{ ['mon','tue','wed','thu','fri','sat','sun'][now().weekday()] in C_days }}"
          - condition: template
            value_template: >-
              {% if presence_ent and presence_required|length > 0 %}
                {{ states(presence_ent) == presence_required }}
              {% else %}
                true
              {% endif %}
        sequence:
          - variables:
              _preset: "{{ C_preset }}"
              _rooms: "{{ C_rooms }}"
          - choose:
              - conditions: []
                sequence: *clean_sequence
          - stop: "Eseguito (Blocco C)"

      - conditions:
          - condition: trigger
            id: blockD
          - condition: template
            value_template: "{{ adv_on and D_on }}"
          - condition: template
            value_template: "{{ ['mon','tue','wed','thu','fri','sat','sun'][now().weekday()] in D_days }}"
          - condition: template
            value_template: >-
              {% if presence_ent and presence_required|length > 0 %}
                {{ states(presence_ent) == presence_required }}
              {% else %}
                true
              {% endif %}
        sequence:
          - variables:
              _preset: "{{ D_preset }}"
              _rooms: "{{ D_rooms }}"
          - choose:
              - conditions: []
                sequence: *clean_sequence
          - stop: "Eseguito (Blocco D)"
