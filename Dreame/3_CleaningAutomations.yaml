blueprint:
  name: Pulizia programmata Dreame (Semplice o Avanzata, con CleanGenius e Presenza)
  description: >
    Pianifica pulizie Dreame per mattina/sera (modalità semplice) o con
    fino a 4 blocchi indipendenti (modalità avanzata). Supporta selezione
    stanze per ID o nome (se fornisci la mappa), CleanGenius opzionale,
    controllo presenza opzionale e reset del flag "pulito oggi".

  domain: automation
  source_url: https://github.com/Magnum9O/HA_BluePrints/blob/main/Dreame/ScheduledCleaningAdvanced.yaml

  input:

    # Dispositivi/Helper principali
    vacuum_entity:
      name: Robot Dreame
      description: Seleziona il tuo aspirapolvere Dreame.
      selector:
        entity:
          domain: vacuum

    map_camera:
      name: Mappa (opzionale, per usare nomi stanza)
      description: Camera con attributo 'rooms' (es. camera.ambrogio_map_2). Serve SOLO se in 'rooms' metti i nomi stanza e non gli ID.
      default: ""
      selector:
        entity:
          domain: camera

    cleangenius_select:
      name: Select CleanGenius (opzionale)
      description: Select dell'integrazione Dreame (es. select.ambrogio_cleangenius_2). Se vuoto, il blueprint non imposta CleanGenius.
      default: ""
      selector:
        entity:
          domain: select

    cleaned_today_helper:
      name: Flag "pulito oggi"
      description: Un input_boolean che verrà attivato dopo una pulizia e resettato ogni giorno all'orario scelto.
      selector:
        entity:
          domain: input_boolean

    reset_time:
      name: Orario reset giornaliero
      description: Orario in cui spegnere il flag "pulito oggi".
      default: "23:59:00"
      selector:
        time: {}

    # Presenza (opzionale)
    presence_helper:
      name: Helper presenza (opzionale)
      description: >
        Entità da confrontare (counter, input_boolean, input_select, ecc.).
        Se vuoto, la presenza è ignorata.
      default: ""
      selector:
        entity: {}

    presence_required_value:
      name: Valore presenza richiesto (opzionale)
      description: >
        Esempi: 1, home, on. Se vuoto e "Helper presenza" è valorizzato,
        la condizione presenza viene saltata.
      default: ""

    # Modalità Semplice
    simple_mode_enabled:
      name: Abilita modalità semplice (Mattina/Sera)
      default: true
      selector:
        boolean: {}

    morning_enabled:
      name: Attiva schedulazione mattina
      default: false
      selector:
        boolean: {}

    morning_time:
      name: Orario mattina
      default: "08:30:00"
      selector:
        time: {}

    morning_days:
      name: Giorni mattina
      description: Giorni della settimana per la pulizia del mattino.
      default: []
      selector:
        select:
          options:
            - mon
            - tue
            - wed
            - thu
            - fri
            - sat
            - sun
          multiple: true
          mode: list

    morning_preset:
      name: Preset mattina
      description: Scegli la modalità di pulizia.
      default: "Pulizia"
      selector:
        select:
          options:
            - Aspirazione
            - Lavaggio
            - Pulizia
            - Pulizia profonda

    morning_rooms:
      name: Stanze mattina (ID o nomi separati da virgola)
      description: Esempi: "2,3,4" oppure "Kitchen,Bathroom"
      default: ""

    evening_enabled:
      name: Attiva schedulazione sera
      default: false
      selector:
        boolean: {}

    evening_time:
      name: Orario sera
      default: "20:00:00"
      selector:
        time: {}

    evening_days:
      name: Giorni sera
      description: Giorni della settimana per la pulizia della sera.
      default: []
      selector:
        select:
          options:
            - mon
            - tue
            - wed
            - thu
            - fri
            - sat
            - sun
          multiple: true
          mode: list

    evening_preset:
      name: Preset sera
      description: Scegli la modalità di pulizia.
      default: "Pulizia"
      selector:
        select:
          options:
            - Aspirazione
            - Lavaggio
            - Pulizia
            - Pulizia profonda

    evening_rooms:
      name: Stanze sera (ID o nomi separati da virgola)
      description: Esempi: "2,3,4" oppure "Kitchen,Bathroom"
      default: ""

    # Modalità Avanzata (blocchi A–D)
    advanced_mode_enabled:
      name: Abilita modalità avanzata (Blocchi A–D)
      default: false
      selector:
        boolean: {}

    # Blocco A
    blockA_enabled:
      name: Blocco A — attivo
      default: false
      selector:
        boolean: {}

    blockA_time:
      name: Blocco A — orario
      default: "09:00:00"
      selector:
        time: {}

    blockA_days:
      name: Blocco A — giorni
      default: []
      selector:
        select:
          options: [mon, tue, wed, thu, fri, sat, sun]
          multiple: true
          mode: list

    blockA_preset:
      name: Blocco A — preset
      default: "Pulizia"
      selector:
        select:
          options: [Aspirazione, Lavaggio, Pulizia, Pulizia profonda]

    blockA_rooms:
      name: Blocco A — stanze (ID o nomi)
      default: ""

    # Blocco B
    blockB_enabled:
      name: Blocco B — attivo
      default: false
      selector:
        boolean: {}

    blockB_time:
      name: Blocco B — orario
      default: "11:00:00"
      selector:
        time: {}

    blockB_days:
      name: Blocco B — giorni
      default: []
      selector:
        select:
          options: [mon, tue, wed, thu, fri, sat, sun]
          multiple: true
          mode: list

    blockB_preset:
      name: Blocco B — preset
      default: "Pulizia"
      selector:
        select:
          options: [Aspirazione, Lavaggio, Pulizia, Pulizia profonda]

    blockB_rooms:
      name: Blocco B — stanze (ID o nomi)
      default: ""

    # Blocco C
    blockC_enabled:
      name: Blocco C — attivo
      default: false
      selector:
        boolean: {}

    blockC_time:
      name: Blocco C — orario
      default: "15:00:00"
      selector:
        time: {}

    blockC_days:
      name: Blocco C — giorni
      default: []
      selector:
        select:
          options: [mon, tue, wed, thu, fri, sat, sun]
          multiple: true
          mode: list

    blockC_preset:
      name: Blocco C — preset
      default: "Pulizia"
      selector:
        select:
          options: [Aspirazione, Lavaggio, Pulizia, Pulizia profonda]

    blockC_rooms:
      name: Blocco C — stanze (ID o nomi)
      default: ""

    # Blocco D
    blockD_enabled:
      name: Blocco D — attivo
      default: false
      selector:
        boolean: {}

    blockD_time:
      name: Blocco D — orario
      default: "18:30:00"
      selector:
        time: {}

    blockD_days:
      name: Blocco D — giorni
      default: []
      selector:
        select:
          options: [mon, tue, wed, thu, fri, sat, sun]
          multiple: true
          mode: list

    blockD_preset:
      name: Blocco D — preset
      default: "Pulizia"
      selector:
        select:
          options: [Aspirazione, Lavaggio, Pulizia, Pulizia profonda]

    blockD_rooms:
      name: Blocco D — stanze (ID o nomi)
      default: ""

mode: single

variables:
  vac: !input vacuum_entity
  map_cam: !input map_camera
  cg_select: !input cleangenius_select
  pres_ent: !input presence_helper
  pres_val: !input presence_required_value
  flag_cleaned: !input cleaned_today_helper

  simp_on: !input simple_mode_enabled
  m_on: !input morning_enabled
  m_time: !input morning_time
  m_days: !input morning_days
  m_preset: !input morning_preset
  m_rooms: !input morning_rooms

  e_on: !input evening_enabled
  e_time: !input evening_time
  e_days: !input evening_days
  e_preset: !input evening_preset
  e_rooms: !input evening_rooms

  adv_on: !input advanced_mode_enabled

  a_on: !input blockA_enabled
  a_time: !input blockA_time
  a_days: !input blockA_days
  a_preset: !input blockA_preset
  a_rooms: !input blockA_rooms

  b_on: !input blockB_enabled
  b_time: !input blockB_time
  b_days: !input blockB_days
  b_preset: !input blockB_preset
  b_rooms: !input blockB_rooms

  c_on: !input blockC_enabled
  c_time: !input blockC_time
  c_days: !input blockC_days
  c_preset: !input blockC_preset
  c_rooms: !input blockC_rooms

  d_on: !input blockD_enabled
  d_time: !input blockD_time
  d_days: !input blockD_days
  d_preset: !input blockD_preset
  d_rooms: !input blockD_rooms

  reset_at: !input reset_time

trigger:
  # Reset giornaliero
  - id: reset
    platform: time
    at: "{{ reset_at }}"

  # Semplice: mattina/sera
  - id: morning
    platform: time
    at: "{{ m_time }}"
  - id: evening
    platform: time
    at: "{{ e_time }}"

  # Avanzata: A–D
  - id: blockA
    platform: time
    at: "{{ a_time }}"
  - id: blockB
    platform: time
    at: "{{ b_time }}"
  - id: blockC
    platform: time
    at: "{{ c_time }}"
  - id: blockD
    platform: time
    at: "{{ d_time }}"

condition: []

action:
  - choose:

      # RESET GIORNALIERO
      - conditions: "{{ trigger.id == 'reset' }}"
        sequence:
          - service: input_boolean.turn_off
            target: { entity_id: "{{ flag_cleaned }}" }

      # MATTINA
      - conditions: >
          {{ trigger.id == 'morning'
             and simp_on
             and m_on
             and (m_days | count == 0 or now().isoweekday()|int in
                  [1 if 'mon' in m_days else 0,
                   2 if 'tue' in m_days else 0,
                   3 if 'wed' in m_days else 0,
                   4 if 'thu' in m_days else 0,
                   5 if 'fri' in m_days else 0,
                   6 if 'sat' in m_days else 0,
                   7 if 'sun' in m_days else 0]) }}
        sequence:
          - choose:
              - conditions: >
                  {{ pres_ent != '' and pres_val != '' and states(pres_ent) != pres_val }}
                sequence: []
            default:
              - variables:
                  preset_now: "{{ m_preset }}"
                  rooms_now: "{{ m_rooms }}"
              - sequence: &run_clean
                - variables:
                    seg_list: >-
                      {# converte 'rooms_now' in lista di ID #}
                      {% set raw = (rooms_now or '') | string %}
                      {% set parts = [p.strip() for p in raw.split(',') if p|trim != '' ] %}
                      {% set use_names = parts | select('match','[A-Za-z]') | list | count > 0 %}
                      {% set ids = [] %}
                      {% if use_names and map_cam != '' %}
                        {% set rooms = state_attr(map_cam,'rooms') or {} %}
                        {% for p in parts %}
                          {% set rid = None %}
                          {% for k,v in rooms.items() %}
                            {% if (v.name or v['name']) | string == p %}
                              {% set rid = (v.room_id or v['room_id']) %}
                            {% endif %}
                          {% endfor %}
                          {% if rid is not none %}
                            {% set ids = ids + [ rid | int ] %}
                          {% endif %}
                        {% endfor %}
                      {% else %}
                        {% for p in parts %}
                          {% if p|int|string == p|trim %}
                            {% set ids = ids + [ p|int ] %}
                          {% endif %}
                        {% endfor %}
                      {% endif %}
                      {{ ids }}

                - choose:
                    # CleanGenius OFF per Aspirazione/Lavaggio
                    - conditions: "{{ cg_select != '' and preset_now in ['Aspirazione','Lavaggio'] }}"
                      sequence:
                        - service: select.select_option
                          target: { entity_id: "{{ cg_select }}" }
                          data: { option: "off" }

                    # CleanGenius Routine per Pulizia
                    - conditions: "{{ cg_select != '' and preset_now == 'Pulizia' }}"
                      sequence:
                        - service: select.select_option
                          target: { entity_id: "{{ cg_select }}" }
                          data: { option: "routine_cleaning" }

                    # CleanGenius Deep per Pulizia profonda
                    - conditions: "{{ cg_select != '' and preset_now == 'Pulizia profonda' }}"
                      sequence:
                        - service: select.select_option
                          target: { entity_id: "{{ cg_select }}" }
                          data: { option: "deep_cleaning" }

                - service: dreame_vacuum.vacuum_clean_segment
                  target:
                    entity_id: "{{ vac }}"
                  data:
                    segments: "{{ seg_list }}"

                - service: input_boolean.turn_on
                  target: { entity_id: "{{ flag_cleaned }}" }

      # SERA
      - conditions: >
          {{ trigger.id == 'evening'
             and simp_on
             and e_on
             and (e_days | count == 0 or now().isoweekday()|int in
                  [1 if 'mon' in e_days else 0,
                   2 if 'tue' in e_days else 0,
                   3 if 'wed' in e_days else 0,
                   4 if 'thu' in e_days else 0,
                   5 if 'fri' in e_days else 0,
                   6 if 'sat' in e_days else 0,
                   7 if 'sun' in e_days else 0]) }}
        sequence:
          - choose:
              - conditions: >
                  {{ pres_ent != '' and pres_val != '' and states(pres_ent) != pres_val }}
                sequence: []
            default:
              - variables:
                  preset_now: "{{ e_preset }}"
                  rooms_now: "{{ e_rooms }}"
              - sequence: *run_clean

      # BLOCCO A
      - conditions: >
          {{ trigger.id == 'blockA'
             and adv_on and a_on
             and (a_days | count == 0 or now().isoweekday()|int in
                  [1 if 'mon' in a_days else 0,
                   2 if 'tue' in a_days else 0,
                   3 if 'wed' in a_days else 0,
                   4 if 'thu' in a_days else 0,
                   5 if 'fri' in a_days else 0,
                   6 if 'sat' in a_days else 0,
                   7 if 'sun' in a_days else 0]) }}
        sequence:
          - choose:
              - conditions: >
                  {{ pres_ent != '' and pres_val != '' and states(pres_ent) != pres_val }}
                sequence: []
            default:
              - variables:
                  preset_now: "{{ a_preset }}"
                  rooms_now: "{{ a_rooms }}"
              - sequence: *run_clean

      # BLOCCO B
      - conditions: >
          {{ trigger.id == 'blockB'
             and adv_on and b_on
             and (b_days | count == 0 or now().isoweekday()|int in
                  [1 if 'mon' in b_days else 0,
                   2 if 'tue' in b_days else 0,
                   3 if 'wed' in b_days else 0,
                   4 if 'thu' in b_days else 0,
                   5 if 'fri' in b_days else 0,
                   6 if 'sat' in b_days else 0,
                   7 if 'sun' in b_days else 0]) }}
        sequence:
          - choose:
              - conditions: >
                  {{ pres_ent != '' and pres_val != '' and states(pres_ent) != pres_val }}
                sequence: []
            default:
              - variables:
                  preset_now: "{{ b_preset }}"
                  rooms_now: "{{ b_rooms }}"
              - sequence: *run_clean

      # BLOCCO C
      - conditions: >
          {{ trigger.id == 'blockC'
             and adv_on and c_on
             and (c_days | count == 0 or now().isoweekday()|int in
                  [1 if 'mon' in c_days else 0,
                   2 if 'tue' in c_days else 0,
                   3 if 'wed' in c_days else 0,
                   4 if 'thu' in c_days else 0,
                   5 if 'fri' in c_days else 0,
                   6 if 'sat' in c_days else 0,
                   7 if 'sun' in c_days else 0]) }}
        sequence:
          - choose:
              - conditions: >
                  {{ pres_ent != '' and pres_val != '' and states(pres_ent) != pres_val }}
                sequence: []
            default:
              - variables:
                  preset_now: "{{ c_preset }}"
                  rooms_now: "{{ c_rooms }}"
              - sequence: *run_clean

      # BLOCCO D
      - conditions: >
          {{ trigger.id == 'blockD'
             and adv_on and d_on
             and (d_days | count == 0 or now().isoweekday()|int in
                  [1 if 'mon' in d_days else 0,
                   2 if 'tue' in d_days else 0,
                   3 if 'wed' in d_days else 0,
                   4 if 'thu' in d_days else 0,
                   5 if 'fri' in d_days else 0,
                   6 if 'sat' in d_days else 0,
                   7 if 'sun' in d_days else 0]) }}
        sequence:
          - choose:
              - conditions: >
                  {{ pres_ent != '' and pres_val != '' and states(pres_ent) != pres_val }}
                sequence: []
            default:
              - variables:
                  preset_now: "{{ d_preset }}"
                  rooms_now: "{{ d_rooms }}"
              - sequence: *run_clean

    default: []
