blueprint:
  name: Dreame – Pianificazione avanzata (settimanale)
  description: >-
    Pianifica pulizie per gruppi di giorni e orari, con preset allineati ai tuoi
    script: "Pulizia" e "Pulizia profonda" usano CleanGenius (routine/deep);
    "Aspirazione" e "Lavaggio" usano le modalità pure (sweeping/mopping) con
    CleanGenius disattivato. Supporta presenza (counter 0/1 o boolean), attesa
    stato robot (idle/charging/...), mappatura Nome→ID stanza da camera mappa e
    reset giornaliero dell'helper "pulito oggi". Offre anche una modalità semplice
    (mattina/sera) come nel primo step, più 4 blocchi avanzati (A–D) per
    combinazioni tipo: lun/mer/ven, mar/gio, sabato tutta casa, ecc.
  domain: automation
  source_url: https://raw.githubusercontent.com/Magnum9O/HA_BluePrints/main/Dreame/ScheduledCleaningAdvanced.yaml

  input:

    # --- ENTITÀ DREAME / STATO ---
    vacuum_entity:
      name: Robot aspirapolvere
      description: >-
        Entità del tuo robot Dreame (es. vacuum.ambrogio).
      selector:
        entity:
          domain: vacuum

    cleangenius_select:
      name: Select – CleanGenius
      description: >-
        Select dell’integrazione Dreame per "routine_cleaning" / "deep_cleaning" / "off".
      selector:
        entity:
          domain: select

    cleaning_mode_select:
      name: Select – Cleaning mode (pure)
      description: >-
        Select della modalità pura: "sweeping" (aspirazione) o "mopping" (lavaggio).
      selector:
        entity:
          domain: select

    vacuum_status:
      name: Sensore stato robot
      description: >-
        Sensore di stato del robot (idle / sleeping / charging / ...).
      selector:
        entity:
          domain: sensor

    # --- OPZIONALI: CAMERA MAPPA / PRESENZA / FLAG GIORNALIERO ---
    map_camera:
      name: Camera mappa (opzionale, per Nome→ID)
      description: >-
        Se fornita, i Nomi stanza verranno mappati agli ID leggendo
        state_attr(camera,'rooms').
      default:
      selector:
        entity:
          domain: camera

    presence_counter:
      name: Entità presenza (opzionale)
      description: >-
        Contatore/boolean della presenza (es. 1=via di casa). Se compilato, ogni esecuzione
        verificherà che "Valore presenza richiesto" combaci.
      default:
      selector:
        entity: {}

    presence_required_value:
      name: Valore presenza richiesto
      description: >-
        Valore atteso dell’entità di presenza per consentire l’avvio (es. "1" o "on").
      default: "1"
      selector:
        text: {}

    cleaned_today:
      name: Helper "pulito oggi"
      description: >-
        input_boolean che viene impostato a ON dopo una pulizia riuscita e azzerato alle 23:59.
      selector:
        entity:
          domain: input_boolean

    # --- ATTESA STATO ROBOT ---
    wait_before_start:
      name: Attendi che il robot sia fermo prima di avviare
      default: true
      selector:
        boolean: {}

    idle_states_csv:
      name: Stati considerati "fermo"
      description: >-
        Elenco separato da virgola confrontato con il sensore di stato (es. idle,sleeping,charging).
      default: idle,sleeping,charging
      selector:
        text: {}

    # ------------------------- MODALITÀ SEMPLICE -------------------------
    enable_simple:
      name: Abilita modalità semplice (mattina/sera)
      default: true
      selector:
        boolean: {}

    morning_time:
      name: Orario mattina
      default: "09:00:00"
      selector:
        time: {}

    morning_days:
      name: Giorni mattina
      description: Giorni in cui eseguire la pulizia mattutina.
      default: ["mon","tue","wed","thu","fri"]
      selector:
        select:
          multiple: true
          mode: list
          options: ["mon","tue","wed","thu","fri","sat","sun"]

    morning_rooms:
      name: Stanze mattina (ID o Nomi separati da virgola)
      description: >-
        Esempi: 2,3,4 oppure Kitchen,Bathroom. I nomi richiedono la camera mappa.
      selector:
        text: {}

    morning_preset:
      name: Tipo pulizia mattina
      default: Pulizia
      selector:
        select:
          options: ["Pulizia","Pulizia profonda","Aspirazione","Lavaggio"]

    evening_time:
      name: Orario sera
      default: "19:00:00"
      selector:
        time: {}

    evening_days:
      name: Giorni sera
      description: Giorni in cui eseguire la pulizia serale.
      default: ["mon","tue","wed","thu","fri"]
      selector:
        select:
          multiple: true
          mode: list
          options: ["mon","tue","wed","thu","fri","sat","sun"]

    evening_rooms:
      name: Stanze sera (ID o Nomi separati da virgola)
      description: >-
        Esempi: 7,10 oppure Living Room,Kitchen. I nomi richiedono la camera mappa.
      selector:
        text: {}

    evening_preset:
      name: Tipo pulizia sera
      default: Pulizia
      selector:
        select:
          options: ["Pulizia","Pulizia profonda","Aspirazione","Lavaggio"]

    run_evening_only_if_not_cleaned:
      name: Esegui sera solo se non ha già pulito oggi
      default: true
      selector:
        boolean: {}

    # ------------------------- MODALITÀ AVANZATA (BLOCCHI A–D) -------------------------
    enable_block_a:
      name: Abilita blocco A
      default: false
      selector:
        boolean: {}

    block_a_time:
      name: Orario blocco A
      default: "09:00:00"
      selector:
        time: {}

    block_a_days:
      name: Giorni blocco A
      default: ["mon","wed","fri"]
      selector:
        select:
          multiple: true
          mode: list
          options: ["mon","tue","wed","thu","fri","sat","sun"]

    block_a_all_rooms:
      name: Tutte le stanze (blocco A)
      default: false
      selector:
        boolean: {}

    block_a_rooms:
      name: Stanze blocco A (ID o Nomi CSV)
      description: >-
        Se "Tutte le stanze" è off: Esempi 2,3,4 oppure Kitchen,Bathroom.
      selector:
        text: {}

    block_a_preset:
      name: Tipo pulizia blocco A
      default: Pulizia
      selector:
        select:
          options: ["Pulizia","Pulizia profonda","Aspirazione","Lavaggio"]

    block_a_skip_if_cleaned:
      name: Salta blocco A se ha già pulito oggi
      default: false
      selector:
        boolean: {}

    enable_block_b:
      name: Abilita blocco B
      default: false
      selector:
        boolean: {}

    block_b_time:
      name: Orario blocco B
      default: "10:00:00"
      selector:
        time: {}

    block_b_days:
      name: Giorni blocco B
      default: ["tue","thu"]
      selector:
        select:
          multiple: true
          mode: list
          options: ["mon","tue","wed","thu","fri","sat","sun"]

    block_b_all_rooms:
      name: Tutte le stanze (blocco B)
      default: false
      selector:
        boolean: {}

    block_b_rooms:
      name: Stanze blocco B (ID o Nomi CSV)
      selector:
        text: {}

    block_b_preset:
      name: Tipo pulizia blocco B
      default: Aspirazione
      selector:
        select:
          options: ["Pulizia","Pulizia profonda","Aspirazione","Lavaggio"]

    block_b_skip_if_cleaned:
      name: Salta blocco B se ha già pulito oggi
      default: false
      selector:
        boolean: {}

    enable_block_c:
      name: Abilita blocco C
      default: false
      selector:
        boolean: {}

    block_c_time:
      name: Orario blocco C
      default: "11:00:00"
      selector:
        time: {}

    block_c_days:
      name: Giorni blocco C
      default: ["sat"]
      selector:
        select:
          multiple: true
          mode: list
          options: ["mon","tue","wed","thu","fri","sat","sun"]

    block_c_all_rooms:
      name: Tutte le stanze (blocco C)
      default: true
      selector:
        boolean: {}

    block_c_rooms:
      name: Stanze blocco C (ID o Nomi CSV)
      description: >-
        Ignorato se "Tutte le stanze" è attivo.
      selector:
        text: {}

    block_c_preset:
      name: Tipo pulizia blocco C
      default: Pulizia profonda
      selector:
        select:
          options: ["Pulizia","Pulizia profonda","Aspirazione","Lavaggio"]

    block_c_skip_if_cleaned:
      name: Salta blocco C se ha già pulito oggi
      default: false
      selector:
        boolean: {}

    enable_block_d:
      name: Abilita blocco D
      default: false
      selector:
        boolean: {}

    block_d_time:
      name: Orario blocco D
      default: "12:00:00"
      selector:
        time: {}

    block_d_days:
      name: Giorni blocco D
      default: []
      selector:
        select:
          multiple: true
          mode: list
          options: ["mon","tue","wed","thu","fri","sat","sun"]

    block_d_all_rooms:
      name: Tutte le stanze (blocco D)
      default: false
      selector:
        boolean: {}

    block_d_rooms:
      name: Stanze blocco D (ID o Nomi CSV)
      selector:
        text: {}

    block_d_preset:
      name: Tipo pulizia blocco D
      default: Pulizia
      selector:
        select:
          options: ["Pulizia","Pulizia profonda","Aspirazione","Lavaggio"]

    block_d_skip_if_cleaned:
      name: Salta blocco D se ha già pulito oggi
      default: false
      selector:
        boolean: {}

mode: restart
max_exceeded: silent

# ----------------------------- VARIABILI COMUNI -----------------------------
variables:
  vac: !input vacuum_entity
  sel_cg: !input cleangenius_select
  sel_mode: !input cleaning_mode_select
  sens_status: !input vacuum_status
  map_cam: !input map_camera

  presence_ent: !input presence_counter
  presence_required: !input presence_required_value

  ib_cleaned: !input cleaned_today

  wait_before: !input wait_before_start
  idle_set: >
    {{ ( !input idle_states_csv ) | lower | replace(' ','') | split(',') }}

  # Mappa Nome -> ID dalle rooms (se disponibile)
  rooms_map: >
    {% set r = state_attr(map_cam, 'rooms') if map_cam else none %}
    {{ r if r is mapping else dict() }}

  # Utility: restituisce tutti gli ID stanza dalla mappa (se disponibile)
  all_segment_ids: >
    {% set out = [] %}
    {% for k,v in rooms_map.items() %}
      {% set rid = (v.room_id if 'room_id' in v else k)|int %}
      {% set out = out + [rid] %}
    {% endfor %}
    {{ out | unique | list }}

  # Parser "ID o Nomi CSV" -> lista ID usando rooms_map (se presente)
  parse_csv_to_segments: >
    {% set txt = caller %}
    {% set parts = (txt or '') | string | replace('\n','') | split(',') %}
    {% set out = [] %}
    {% for p in parts %}
      {% set s = p | trim %}
      {% if s == '' %}
        {% continue %}
      {% endif %}
      {% if s|int|string == s %}
        {% set out = out + [ s|int ] %}
      {% else %}
        {% set rid = none %}
        {% for k,v in rooms_map.items() %}
          {% if (v.name|string)|lower == s|lower %}
            {% set rid = (v.room_id if 'room_id' in v else k)|int %}
            {% break %}
          {% endif %}
        {% endfor %}
        {% if rid is not none %}
          {% set out = out + [ rid ] %}
        {% endif %}
      {% endif %}
    {% endfor %}
    {{ out | unique | list }}

  # --- Semplice ---
  enable_simple: !input enable_simple
  m_time: !input morning_time
  m_days: !input morning_days
  m_rooms_raw: !input morning_rooms
  m_preset: !input morning_preset

  e_time: !input evening_time
  e_days: !input evening_days
  e_rooms_raw: !input evening_rooms
  e_preset: !input evening_preset
  e_only_if_not: !input run_evening_only_if_not_cleaned

  segments_morning: >
    {% call parse_csv_to_segments %}{{ m_rooms_raw }}{% endcall %}
  segments_evening: >
    {% call parse_csv_to_segments %}{{ e_rooms_raw }}{% endcall %}

  # --- Avanzata A–D ---
  ena_a: !input enable_block_a
  a_time: !input block_a_time
  a_days: !input block_a_days
  a_all: !input block_a_all_rooms
  a_rooms_raw: !input block_a_rooms
  a_preset: !input block_a_preset
  a_skip_if: !input block_a_skip_if_cleaned
  segments_a: >
    {{ all_segment_ids if a_all else ( (caller|default('')) and ( ( (caller|default('')) ,) ) ) }}
  # Workaround per poter usare call in HA: ridefiniamo con call sotto
  segments_a_call: >
    {% if a_all %}{{ all_segment_ids }}
    {% else %}{% call parse_csv_to_segments %}{{ a_rooms_raw }}{% endcall %}{% endif %}

  ena_b: !input enable_block_b
  b_time: !input block_b_time
  b_days: !input block_b_days
  b_all: !input block_b_all_rooms
  b_rooms_raw: !input block_b_rooms
  b_preset: !input block_b_preset
  b_skip_if: !input block_b_skip_if_cleaned
  segments_b_call: >
    {% if b_all %}{{ all_segment_ids }}
    {% else %}{% call parse_csv_to_segments %}{{ b_rooms_raw }}{% endcall %}{% endif %}

  ena_c: !input enable_block_c
  c_time: !input block_c_time
  c_days: !input block_c_days
  c_all: !input block_c_all_rooms
  c_rooms_raw: !input block_c_rooms
  c_preset: !input block_c_preset
  c_skip_if: !input block_c_skip_if_cleaned
  segments_c_call: >
    {% if c_all %}{{ all_segment_ids }}
    {% else %}{% call parse_csv_to_segments %}{{ c_rooms_raw }}{% endcall %}{% endif %}

  ena_d: !input enable_block_d
  d_time: !input block_d_time
  d_days: !input block_d_days
  d_all: !input block_d_all_rooms
  d_rooms_raw: !input block_d_rooms
  d_preset: !input block_d_preset
  d_skip_if: !input block_d_skip_if_cleaned
  segments_d_call: >
    {% if d_all %}{{ all_segment_ids }}
    {% else %}{% call parse_csv_to_segments %}{{ d_rooms_raw }}{% endcall %}{% endif %}

  today_code: >
    {{ ['sun','mon','tue','wed','thu','fri','sat'][ now().weekday() + 1 if now().weekday() < 6 else 0 ] }}

# ----------------------------- TRIGGER -----------------------------
trigger:
  # Reset giornaliero alle 23:59
  - platform: time
    at: "23:59:00"
    id: reset_midnight

  # Semplice – mattina/sera
  - platform: time
    at: !input morning_time
    id: morning_time
  - platform: time
    at: !input evening_time
    id: evening_time

  # Avanzata – blocchi A–D
  - platform: time
    at: !input block_a_time
    id: block_a_time
  - platform: time
    at: !input block_b_time
    id: block_b_time
  - platform: time
    at: !input block_c_time
    id: block_c_time
  - platform: time
    at: !input block_d_time
    id: block_d_time

condition: []

# ----------------------------- AZIONI -----------------------------
action:
  - choose:

      # ---------- RESET A MEZZANOTTE ----------
      - conditions:
          - condition: trigger
            id: reset_midnight
        sequence:
          - service: input_boolean.turn_off
            target:
              entity_id: !input cleaned_today

      # ---------- SEMPLICE: MATTINA ----------
      - conditions:
          - condition: trigger
            id: morning_time
          - condition: template
            value_template: "{{ enable_simple }}"
          - condition: template
            value_template: "{{ today_code in m_days }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not presence_ent }}"
              - condition: template
                value_template: "{{ presence_ent and states(presence_ent) == presence_required }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not wait_before }}"
              - condition: template
                value_template: "{{ states(sens_status)|lower in idle_set }}"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ m_preset in ['Pulizia','Pulizia profonda'] }}"
                sequence:
                  - service: select.select_option
                    target: { entity_id: !input cleangenius_select }
                    data:
                      option: "{{ 'routine_cleaning' if m_preset == 'Pulizia' else 'deep_cleaning' }}"
                  - wait_template: >-
                      {{ states( sel_cg ) in ['routine_cleaning','deep_cleaning','off','unknown','unavailable','none'] }}
                    timeout: "00:01:00"
                  - condition: template
                    value_template: "{{ (segments_morning | count) > 0 }}"
                  - service: dreame_vacuum.vacuum_clean_segment
                    target: { entity_id: !input vacuum_entity }
                    data:
                      segments: "{{ segments_morning }}"
              - conditions:
                  - condition: template
                    value_template: "{{ m_preset in ['Aspirazione','Lavaggio'] }}"
                sequence:
                  - service: select.select_option
                    target: { entity_id: !input cleangenius_select }
                    data:
                      option: "off"
                  - wait_template: >-
                      {{ states( sel_cg ) in ['off','unknown','unavailable','none'] }}
                    timeout: "00:01:00"
                  - service: select.select_option
                    target: { entity_id: !input cleaning_mode_select }
                    data:
                      option: "{{ 'sweeping' if m_preset == 'Aspirazione' else 'mopping' }}"
                  - condition: template
                    value_template: "{{ (segments_morning | count) > 0 }}"
                  - service: dreame_vacuum.vacuum_clean_segment
                    target: { entity_id: !input vacuum_entity }
                    data:
                      segments: "{{ segments_morning }}"
          - service: input_boolean.turn_on
            target: { entity_id: !input cleaned_today }

      # ---------- SEMPLICE: SERA ----------
      - conditions:
          - condition: trigger
            id: evening_time
          - condition: template
            value_template: "{{ enable_simple }}"
          - condition: template
            value_template: "{{ today_code in e_days }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not presence_ent }}"
              - condition: template
                value_template: "{{ presence_ent and states(presence_ent) == presence_required }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not wait_before }}"
              - condition: template
                value_template: "{{ states(sens_status)|lower in idle_set }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not e_only_if_not }}"
              - condition: state
                entity_id: !input cleaned_today
                state: "off"
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ e_preset in ['Pulizia','Pulizia profonda'] }}"
                sequence:
                  - service: select.select_option
                    target: { entity_id: !input cleangenius_select }
                    data:
                      option: "{{ 'routine_cleaning' if e_preset == 'Pulizia' else 'deep_cleaning' }}"
                  - wait_template: >-
                      {{ states( sel_cg ) in ['routine_cleaning','deep_cleaning','off','unknown','unavailable','none'] }}
                    timeout: "00:01:00"
                  - condition: template
                    value_template: "{{ (segments_evening | count) > 0 }}"
                  - service: dreame_vacuum.vacuum_clean_segment
                    target: { entity_id: !input vacuum_entity }
                    data:
                      segments: "{{ segments_evening }}"
              - conditions:
                  - condition: template
                    value_template: "{{ e_preset in ['Aspirazione','Lavaggio'] }}"
                sequence:
                  - service: select.select_option
                    target: { entity_id: !input cleangenius_select }
                    data:
                      option: "off"
                  - wait_template: >-
                      {{ states( sel_cg ) in ['off','unknown','unavailable','none'] }}
                    timeout: "00:01:00"
                  - service: select.select_option
                    target: { entity_id: !input cleaning_mode_select }
                    data:
                      option: "{{ 'sweeping' if e_preset == 'Aspirazione' else 'mopping' }}"
                  - condition: template
                    value_template: "{{ (segments_evening | count) > 0 }}"
                  - service: dreame_vacuum.vacuum_clean_segment
                    target: { entity_id: !input vacuum_entity }
                    data:
                      segments: "{{ segments_evening }}"
          - service: input_boolean.turn_on
            target: { entity_id: !input cleaned_today }

      # ---------- AVANZATA: BLOCCO A ----------
      - conditions:
          - condition: trigger
            id: block_a_time
          - condition: template
            value_template: "{{ ena_a }}"
          - condition: template
            value_template: "{{ today_code in a_days }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not presence_ent }}"
              - condition: template
                value_template: "{{ presence_ent and states(presence_ent) == presence_required }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not wait_before }}"
              - condition: template
                value_template: "{{ states(sens_status)|lower in idle_set }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not a_skip_if }}"
              - condition: state
                entity_id: !input cleaned_today
                state: "off"
        sequence:
          - variables:
              seg_a: >-
                {{ segments_a_call }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ a_preset in ['Pulizia','Pulizia profonda'] }}"
                  - condition: template
                    value_template: "{{ (seg_a | count) > 0 }}"
                sequence:
                  - service: select.select_option
                    target: { entity_id: !input cleangenius_select }
                    data:
                      option: "{{ 'routine_cleaning' if a_preset == 'Pulizia' else 'deep_cleaning' }}"
                  - wait_template: >-
                      {{ states( sel_cg ) in ['routine_cleaning','deep_cleaning','off','unknown','unavailable','none'] }}
                    timeout: "00:01:00"
                  - service: dreame_vacuum.vacuum_clean_segment
                    target: { entity_id: !input vacuum_entity }
                    data:
                      segments: "{{ seg_a }}"
              - conditions:
                  - condition: template
                    value_template: "{{ a_preset in ['Aspirazione','Lavaggio'] }}"
                  - condition: template
                    value_template: "{{ (seg_a | count) > 0 }}"
                sequence:
                  - service: select.select_option
                    target: { entity_id: !input cleangenius_select }
                    data:
                      option: "off"
                  - wait_template: >-
                      {{ states( sel_cg ) in ['off','unknown','unavailable','none'] }}
                    timeout: "00:01:00"
                  - service: select.select_option
                    target: { entity_id: !input cleaning_mode_select }
                    data:
                      option: "{{ 'sweeping' if a_preset == 'Aspirazione' else 'mopping' }}"
                  - service: dreame_vacuum.vacuum_clean_segment
                    target: { entity_id: !input vacuum_entity }
                    data:
                      segments: "{{ seg_a }}"
          - service: input_boolean.turn_on
            target: { entity_id: !input cleaned_today }

      # ---------- AVANZATA: BLOCCO B ----------
      - conditions:
          - condition: trigger
            id: block_b_time
          - condition: template
            value_template: "{{ ena_b }}"
          - condition: template
            value_template: "{{ today_code in b_days }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not presence_ent }}"
              - condition: template
                value_template: "{{ presence_ent and states(presence_ent) == presence_required }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not wait_before }}"
              - condition: template
                value_template: "{{ states(sens_status)|lower in idle_set }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not b_skip_if }}"
              - condition: state
                entity_id: !input cleaned_today
                state: "off"
        sequence:
          - variables:
              seg_b: >-
                {{ segments_b_call }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ b_preset in ['Pulizia','Pulizia profonda'] }}"
                  - condition: template
                    value_template: "{{ (seg_b | count) > 0 }}"
                sequence:
                  - service: select.select_option
                    target: { entity_id: !input cleangenius_select }
                    data:
                      option: "{{ 'routine_cleaning' if b_preset == 'Pulizia' else 'deep_cleaning' }}"
                  - wait_template: >-
                      {{ states( sel_cg ) in ['routine_cleaning','deep_cleaning','off','unknown','unavailable','none'] }}
                    timeout: "00:01:00"
                  - service: dreame_vacuum.vacuum_clean_segment
                    target: { entity_id: !input vacuum_entity }
                    data:
                      segments: "{{ seg_b }}"
              - conditions:
                  - condition: template
                    value_template: "{{ b_preset in ['Aspirazione','Lavaggio'] }}"
                  - condition: template
                    value_template: "{{ (seg_b | count) > 0 }}"
                sequence:
                  - service: select.select_option
                    target: { entity_id: !input cleangenius_select }
                    data:
                      option: "off"
                  - wait_template: >-
                      {{ states( sel_cg ) in ['off','unknown','unavailable','none'] }}
                    timeout: "00:01:00"
                  - service: select.select_option
                    target: { entity_id: !input cleaning_mode_select }
                    data:
                      option: "{{ 'sweeping' if b_preset == 'Aspirazione' else 'mopping' }}"
                  - service: dreame_vacuum.vacuum_clean_segment
                    target: { entity_id: !input vacuum_entity }
                    data:
                      segments: "{{ seg_b }}"
          - service: input_boolean.turn_on
            target: { entity_id: !input cleaned_today }

      # ---------- AVANZATA: BLOCCO C ----------
      - conditions:
          - condition: trigger
            id: block_c_time
          - condition: template
            value_template: "{{ ena_c }}"
          - condition: template
            value_template: "{{ today_code in c_days }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not presence_ent }}"
              - condition: template
                value_template: "{{ presence_ent and states(presence_ent) == presence_required }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not wait_before }}"
              - condition: template
                value_template: "{{ states(sens_status)|lower in idle_set }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not c_skip_if }}"
              - condition: state
                entity_id: !input cleaned_today
                state: "off"
        sequence:
          - variables:
              seg_c: >-
                {{ segments_c_call }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ c_preset in ['Pulizia','Pulizia profonda'] }}"
                  - condition: template
                    value_template: "{{ (seg_c | count) > 0 }}"
                sequence:
                  - service: select.select_option
                    target: { entity_id: !input cleangenius_select }
                    data:
                      option: "{{ 'routine_cleaning' if c_preset == 'Pulizia' else 'deep_cleaning' }}"
                  - wait_template: >-
                      {{ states( sel_cg ) in ['routine_cleaning','deep_cleaning','off','unknown','unavailable','none'] }}
                    timeout: "00:01:00"
                  - service: dreame_vacuum.vacuum_clean_segment
                    target: { entity_id: !input vacuum_entity }
                    data:
                      segments: "{{ seg_c }}"
              - conditions:
                  - condition: template
                    value_template: "{{ c_preset in ['Aspirazione','Lavaggio'] }}"
                  - condition: template
                    value_template: "{{ (seg_c | count) > 0 }}"
                sequence:
                  - service: select.select_option
                    target: { entity_id: !input cleangenius_select }
                    data:
                      option: "off"
                  - wait_template: >-
                      {{ states( sel_cg ) in ['off','unknown','unavailable','none'] }}
                    timeout: "00:01:00"
                  - service: select.select_option
                    target: { entity_id: !input cleaning_mode_select }
                    data:
                      option: "{{ 'sweeping' if c_preset == 'Aspirazione' else 'mopping' }}"
                  - service: dreame_vacuum.vacuum_clean_segment
                    target: { entity_id: !input vacuum_entity }
                    data:
                      segments: "{{ seg_c }}"
          - service: input_boolean.turn_on
            target: { entity_id: !input cleaned_today }

      # ---------- AVANZATA: BLOCCO D ----------
      - conditions:
          - condition: trigger
            id: block_d_time
          - condition: template
            value_template: "{{ ena_d }}"
          - condition: template
            value_template: "{{ today_code in d_days }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not presence_ent }}"
              - condition: template
                value_template: "{{ presence_ent and states(presence_ent) == presence_required }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not wait_before }}"
              - condition: template
                value_template: "{{ states(sens_status)|lower in idle_set }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not d_skip_if }}"
              - condition: state
                entity_id: !input cleaned_today
                state: "off"
        sequence:
          - variables:
              seg_d: >-
                {{ segments_d_call }}
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ d_preset in ['Pulizia','Pulizia profonda'] }}"
                  - condition: template
                    value_template: "{{ (seg_d | count) > 0 }}"
                sequence:
                  - service: select.select_option
                    target: { entity_id: !input cleangenius_select }
                    data:
                      option: "{{ 'routine_cleaning' if d_preset == 'Pulizia' else 'deep_cleaning' }}"
                  - wait_template: >-
                      {{ states( sel_cg ) in ['routine_cleaning','deep_cleaning','off','unknown','unavailable','none'] }}
                    timeout: "00:01:00"
                  - service: dreame_vacuum.vacuum_clean_segment
                    target: { entity_id: !input vacuum_entity }
                    data:
                      segments: "{{ seg_d }}"
              - conditions:
                  - condition: template
                    value_template: "{{ d_preset in ['Aspirazione','Lavaggio'] }}"
                  - condition: template
                    value_template: "{{ (seg_d | count) > 0 }}"
                sequence:
                  - service: select.select_option
                    target: { entity_id: !input cleangenius_select }
                    data:
                      option: "off"
                  - wait_template: >-
                      {{ states( sel_cg ) in ['off','unknown','unavailable','none'] }}
                    timeout: "00:01:00"
                  - service: select.select_option
                    target: { entity_id: !input cleaning_mode_select }
                    data:
                      option: "{{ 'sweeping' if d_preset == 'Aspirazione' else 'mopping' }}"
                  - service: dreame_vacuum.vacuum_clean_segment
                    target: { entity_id: !input vacuum_entity }
                    data:
                      segments: "{{ seg_d }}"
          - service: input_boolean.turn_on
            target: { entity_id: !input cleaned_today }

    default: []
