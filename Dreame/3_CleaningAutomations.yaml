blueprint:
  name: Dreame – Automazione pulizie (mattina/sera)
  description: >
    Pianifica pulizie mattina/sera con presenza opzionale, CleanGenius per "Pulizia"
    e "Pulizia profonda", modalità "pure" per "Aspirazione" e "Lavaggio", reset
    giornaliero del flag "pulito oggi". Le stanze possono essere indicate per ID
    (es. 2,3,4) o per Nome (es. Kitchen,Bathroom). Se specifichi la camera mappa,
    i Nomi verranno mappati agli ID attingendo da state_attr(camera,'rooms').

  domain: automation
  source_url: https://raw.githubusercontent.com/Magnum9O/HA_BluePrints/main/Dreame/ScheduledCleaning.yaml
  input:

    # --- ENTITÀ PRINCIPALI ---
    vacuum_entity:
      name: Robot aspirapolvere
      description: Entità del tuo Dreame (es. vacuum.ambrogio).
      selector:
        entity:
          domain: vacuum

    cleangenius_select:
      name: Select – CleanGenius
      description: Select dell’integrazione Dreame per routine/deep/off (es. select.ambrogio_cleangenius_2).
      selector:
        entity:
          domain: select

    cleaning_mode_select:
      name: Select – Cleaning mode
      description: Select per le modalità “pure” (sweeping/mopping/…).
      selector:
        entity:
          domain: select

    vacuum_status:
      name: Sensore stato robot
      description: Sensore di stato del robot (idle/sleeping/charging/…).
      selector:
        entity:
          domain: sensor

    # --- OPZIONALI: PRESENZA & FLAG GIORNALIERO ---
    presence_counter:
      name: Contatore/boolean di presenza (opzionale)
      description: Se indicato, la pulizia parte solo quando il valore combacia con "Valore presenza richiesto".
      default:
      selector:
        entity: {}

    presence_required_value:
      name: Valore presenza richiesto
      description: Valore atteso dell’entità di presenza per considerare la casa “libera” (es. 1).
      default: "1"
      selector:
        text: {}

    cleaned_today:
      name: Helper "pulito oggi"
      description: input_boolean che verrà resettato alle 23:59 e impostato a ON dopo una pulizia riuscita.
      selector:
        entity:
          domain: input_boolean

    # --- MAPPATURA NOMI->ID (OPZIONALE) ---
    map_camera:
      name: Camera mappa (opzionale)
      description: Se fornita, i Nomi stanza verranno mappati agli ID da state_attr(camera,'rooms').
      default:
      selector:
        entity:
          domain: camera

    # --- ORARI & GIORNI ---
    morning_time:
      name: Orario mattina
      selector:
        time: {}

    morning_days:
      name: Giorni mattina
      description: Giorni in cui eseguire la pulizia mattutina.
      selector:
        select:
          multiple: true
          mode: list
          options:
            - mon
            - tue
            - wed
            - thu
            - fri
            - sat
            - sun
      default:
        - mon
        - tue
        - wed
        - thu
        - fri

    evening_time:
      name: Orario sera
      selector:
        time: {}

    evening_days:
      name: Giorni sera
      description: Giorni in cui eseguire la pulizia serale.
      selector:
        select:
          multiple: true
          mode: list
          options:
            - mon
            - tue
            - wed
            - thu
            - fri
            - sat
            - sun
      default:
        - mon
        - tue
        - wed
        - thu
        - fri

    # --- STANZE & PRESET PER OGNI FASCIA ---
    morning_rooms:
      name: Stanze mattina (ID o Nomi separati da virgola)
      description: Esempi: "2,3,4" oppure "Kitchen,Bathroom". I nomi richiedono la camera mappa.
      selector:
        text: {}

    morning_preset:
      name: Tipo pulizia mattina
      selector:
        select:
          options:
            - Pulizia
            - Pulizia profonda
            - Aspirazione
            - Lavaggio
      default: Pulizia

    evening_rooms:
      name: Stanze sera (ID o Nomi separati da virgola)
      description: Esempi: "7,10" oppure "Living Room,Kitchen". I nomi richiedono la camera mappa.
      selector:
        text: {}

    evening_preset:
      name: Tipo pulizia sera
      selector:
        select:
          options:
            - Pulizia
            - Pulizia profonda
            - Aspirazione
            - Lavaggio
      default: Pulizia

    run_evening_only_if_not_cleaned:
      name: Esegui sera solo se non ha già pulito oggi
      selector:
        boolean: {}
      default: true

    # --- ATTESA STATO ROBOT (PRIMA DI PARTIRE) ---
    wait_before_start:
      name: Attendi che il robot sia fermo prima di avviare
      selector:
        boolean: {}
      default: true

    idle_states_csv:
      name: Stati considerati “fermo”
      description: Elenco separato da virgola confrontato con il sensore di stato (es. idle,sleeping,charging).
      default: idle,sleeping,charging
      selector:
        text: {}

mode: restart
max_exceeded: silent

variables:
  vac: !input vacuum_entity
  sel_cg: !input cleangenius_select
  sel_mode: !input cleaning_mode_select
  sens_status: !input vacuum_status
  map_cam: !input map_camera

  presence_ent: !input presence_counter
  presence_required: !input presence_required_value

  ib_cleaned: !input cleaned_today

  m_time: !input morning_time
  m_days: !input morning_days
  m_rooms_raw: !input morning_rooms
  m_preset: !input morning_preset

  e_time: !input evening_time
  e_days: !input evening_days
  e_rooms_raw: !input evening_rooms
  e_preset: !input evening_preset
  e_only_if_not: !input run_evening_only_if_not_cleaned

  wait_before: !input wait_before_start
  idle_csv: !input idle_states_csv

  # Utility: giorno corrente "mon".."sun"
  today_code: >
    {{ ['mon','tue','wed','thu','fri','sat','sun'][ now().weekday() ] }}

  # Utility: parsing stanze (lista finale di interi) – ID diretti o mappati da Nome via camera->rooms
  rooms_map: >
    {% set r = state_attr(map_cam, 'rooms') if map_cam else none %}
    {{ r if r is mapping else dict() }}

  parse_rooms: >
    {% set txt = caller %}
    {% set parts = (txt or '') | string | replace('\n','') | split(',') %}
    {% set out = [] %}
    {% for p in parts %}
      {% set s = p | trim %}
      {% if s == '' %}
        {% continue %}
      {% endif %}
      {% if s|int|string == s %}
        {% set out = out + [ s|int ] %}
      {% else %}
        {# Nome stanza -> room_id (case-insensitive) #}
        {% set rid = none %}
        {% for k,v in rooms_map.items() %}
          {% if (v.name|string)|lower == s|lower %}
            {% set rid = (v.room_id if 'room_id' in v else k)|int %}
            {% break %}
          {% endif %}
        {% endfor %}
        {% if rid is not none %}
          {% set out = out + [ rid ] %}
        {% endif %}
      {% endif %}
    {% endfor %}
    {{ out | unique | list }}

  segments_morning: >
    {% call parse_rooms %}{{ m_rooms_raw }}{% endcall %}

  segments_evening: >
    {% call parse_rooms %}{{ e_rooms_raw }}{% endcall %}

  idle_set: >
    {{ (idle_csv or '') | lower | replace(' ','') | split(',') }}

trigger:
  # Reset giornaliero "pulito oggi" alle 23:59
  - platform: time
    at: "23:59:00"
    id: reset_midnight

  # Mattina
  - platform: time
    at: !input morning_time
    id: morning_time

  # Sera
  - platform: time
    at: !input evening_time
    id: evening_time

condition: []

action:
  - choose:

      # ------------------ RESET A MEZZANOTTE ------------------
      - conditions:
          - condition: trigger
            id: reset_midnight
        sequence:
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ ib_cleaned }}"

      # ------------------ SLOT MATTINA ------------------
      - conditions:
          - condition: trigger
            id: morning_time
          - condition: template
            value_template: "{{ today_code in m_days }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not presence_ent }}"
              - condition: template
                value_template: "{{ presence_ent and states(presence_ent) == presence_required }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not wait_before }}"
              - condition: template
                value_template: "{{ states(sens_status)|lower in idle_set }}"
        sequence:
          - choose:
              # Pulizia / Pulizia profonda con CleanGenius
              - conditions:
                  - condition: template
                    value_template: "{{ m_preset in ['Pulizia','Pulizia profonda'] }}"
                sequence:
                  - service: select.select_option
                    target:
                      entity_id: "{{ sel_cg }}"
                    data:
                      option: "{{ 'routine_cleaning' if m_preset == 'Pulizia' else 'deep_cleaning' }}"
                  - wait_template: >
                      {{ states(sel_cg) in ['routine_cleaning','deep_cleaning','off','unknown','unavailable','none'] }}
                    timeout: "00:01:00"
                  - condition: template
                    value_template: "{{ segments_morning | count > 0 }}"
                  - service: dreame_vacuum.vacuum_clean_segment
                    target:
                      entity_id: "{{ vac }}"
                    data:
                      segments: "{{ segments_morning }}"

              # Aspirazione / Lavaggio con modalità "pure"
              - conditions:
                  - condition: template
                    value_template: "{{ m_preset in ['Aspirazione','Lavaggio'] }}"
                sequence:
                  - service: select.select_option
                    target:
                      entity_id: "{{ sel_cg }}"
                    data:
                      option: "off"
                  - wait_template: >
                      {{ states(sel_cg) in ['off','unknown','unavailable','none'] }}
                    timeout: "00:01:00"
                  - service: select.select_option
                    target:
                      entity_id: "{{ sel_mode }}"
                    data:
                      option: "{{ 'sweeping' if m_preset == 'Aspirazione' else 'mopping' }}"
                  - condition: template
                    value_template: "{{ segments_morning | count > 0 }}"
                  - service: dreame_vacuum.vacuum_clean_segment
                    target:
                      entity_id: "{{ vac }}"
                    data:
                      segments: "{{ segments_morning }}"
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ ib_cleaned }}"

      # ------------------ SLOT SERA ------------------
      - conditions:
          - condition: trigger
            id: evening_time
          - condition: template
            value_template: "{{ today_code in e_days }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not presence_ent }}"
              - condition: template
                value_template: "{{ presence_ent and states(presence_ent) == presence_required }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not wait_before }}"
              - condition: template
                value_template: "{{ states(sens_status)|lower in idle_set }}"
          - condition: or
            conditions:
              - condition: template
                value_template: "{{ not e_only_if_not }}"
              - condition: state
                entity_id: !input cleaned_today
                state: "off"
        sequence:
          - choose:
              # Pulizia / Pulizia profonda con CleanGenius
              - conditions:
                  - condition: template
                    value_template: "{{ e_preset in ['Pulizia','Pulizia profonda'] }}"
                sequence:
                  - service: select.select_option
                    target:
                      entity_id: "{{ sel_cg }}"
                    data:
                      option: "{{ 'routine_cleaning' if e_preset == 'Pulizia' else 'deep_cleaning' }}"
                  - wait_template: >
                      {{ states(sel_cg) in ['routine_cleaning','deep_cleaning','off','unknown','unavailable','none'] }}
                    timeout: "00:01:00"
                  - condition: template
                    value_template: "{{ segments_evening | count > 0 }}"
                  - service: dreame_vacuum.vacuum_clean_segment
                    target:
                      entity_id: "{{ vac }}"
                    data:
                      segments: "{{ segments_evening }}"

              # Aspirazione / Lavaggio con modalità "pure"
              - conditions:
                  - condition: template
                    value_template: "{{ e_preset in ['Aspirazione','Lavaggio'] }}"
                sequence:
                  - service: select.select_option
                    target:
                      entity_id: "{{ sel_cg }}"
                    data:
                      option: "off"
                  - wait_template: >
                      {{ states(sel_cg) in ['off','unknown','unavailable','none'] }}
                    timeout: "00:01:00"
                  - service: select.select_option
                    target:
                      entity_id: "{{ sel_mode }}"
                    data:
                      option: "{{ 'sweeping' if e_preset == 'Aspirazione' else 'mopping' }}"
                  - condition: template
                    value_template: "{{ segments_evening | count > 0 }}"
                  - service: dreame_vacuum.vacuum_clean_segment
                    target:
                      entity_id: "{{ vac }}"
                    data:
                      segments: "{{ segments_evening }}"
          - service: input_boolean.turn_on
            target:
              entity_id: "{{ ib_cleaned }}"
    default: []
